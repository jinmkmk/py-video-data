[
    {
        "index": 1,
        "title": "Welcome to PyCon US 2025",
        "url": "https://www.youtube.com/watch?v=flnVc2Ke-bw",
        "video_id": "flnVc2Ke-bw",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1251,
        "view_count": 515,
        "like_count": 10,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Welcome to PyCon US 2025 from Conference Chair, Elaine Wong.",
        "thumbnail": "https://i.ytimg.com/vi_webp/flnVc2Ke-bw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=flnVc2Ke-bw",
        "original_url": "https://www.youtube.com/watch?v=flnVc2Ke-bw"
    },
    {
        "index": 2,
        "title": "PyCon US 2025 - PSF Welcome",
        "url": "https://www.youtube.com/watch?v=vuQ6QX2zcMo",
        "video_id": "vuQ6QX2zcMo",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1630,
        "view_count": 222,
        "like_count": 6,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Welcome to PyCon US 2025, by Python Software Foundation Executive Director, Deb Nicholson",
        "thumbnail": "https://i.ytimg.com/vi_webp/vuQ6QX2zcMo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=vuQ6QX2zcMo",
        "original_url": "https://www.youtube.com/watch?v=vuQ6QX2zcMo"
    },
    {
        "index": 3,
        "title": "Keynote Speaker - Cory Doctorow",
        "url": "https://www.youtube.com/watch?v=ydVmzg_SJLw",
        "video_id": "ydVmzg_SJLw",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2629,
        "view_count": 18105,
        "like_count": 1004,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Note: This video contains strong language that may offend some viewers. The opinions and perspectives within this video should not be considered official stances of the Python Software Foundation.\n\nCory Doctorow (craphound.com) is a science fiction author, activist and journalist. He is the author of many books, most recently PICKS AND SHOVELS and THE BEZZLE (followups to RED TEAM BLUES) and THE LOST CAUSE, a solarpunk science fiction novel of hope amidst the climate emergency. His most recent nonfiction book is THE INTERNET CON: HOW TO SEIZE THE MEANS OF COMPUTATION, a Big Tech disassembly manual. Other recent books include RED TEAM BLUES, a science fiction crime thriller; CHOKEPOINT CAPITALISM, nonfiction about monopoly and creative labor markets; the LITTLE BROTHER series for young adults; IN REAL LIFE, a graphic novel; and the picture book POESY THE MONSTER SLAYER.\n\nHe maintains a daily blog at Pluralistic.net. He works for the Electronic Frontier Foundation, is a MIT Media Lab Research Affiliate, is a Visiting Professor of Computer Science at Open University, a Visiting Professor of Practice at the University of North Carolina’s School of Library and Information Science and co-founded the UK Open Rights Group. Born in Toronto, Canada, he now lives in Los Angeles. In 2020, he was inducted into the Canadian Science Fiction and Fantasy Hall of Fame. In 2022, he earned the Sir Arthur Clarke Imagination in Service to Society Awardee for lifetime achievement. In 2024, the Media Ecology Association awarded him the Neil Postman Award for Career Achievement in Public Intellectual Activity. York University (Canada) made him an Honourary Doctor of Laws; and the Open University (UK) made him an Honourary Doctor of Computer Science.",
        "thumbnail": "https://i.ytimg.com/vi/ydVmzg_SJLw/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ydVmzg_SJLw",
        "original_url": "https://www.youtube.com/watch?v=ydVmzg_SJLw"
    },
    {
        "index": 4,
        "title": "Keynote Speaker - Lynn Root",
        "url": "https://www.youtube.com/watch?v=Bglsof9b23k",
        "video_id": "Bglsof9b23k",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1840,
        "view_count": 717,
        "like_count": 31,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Lynn Root is a Staff Engineer at Spotify and an adjunct professor at Columbia University's Graduate School of Engineering. She is a seasoned speaker on building and maintaining distributed systems & developer tooling, and is a tech lead on Spotify's ML/AI platform. She likes to refer to herself as an \"engineer's engineer\".\n\nLynn has been active in the Python community since 2012. She is the Chair of the PyLadies Global Council, a former Director and current fellow of the Python Software Foundation, and a global leader of diversity in the Python community. She is the author & maintainer (when she can) of the `interrogate` package.\n\nWhen her hands are not on a keyboard, they are usually fussing with houseplants, holding a bass guitar, or trying to finish one of her many knitting projects.",
        "thumbnail": "https://i.ytimg.com/vi/Bglsof9b23k/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Bglsof9b23k",
        "original_url": "https://www.youtube.com/watch?v=Bglsof9b23k"
    },
    {
        "index": 5,
        "title": "Lightning Talks - Friday, May 16th, 2025 PM",
        "url": "https://www.youtube.com/watch?v=Uuhu-F05A7k",
        "video_id": "Uuhu-F05A7k",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 3496,
        "view_count": 703,
        "like_count": 21,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "A collection of lightning talks made by the community.\n\n2:05 - Rodrigo Girão Serrão - Meta lightning talk\n7:15 - Laís Carvalho - Join Humble Data!\n10:05 - Cheuk Ting Ho - Too many swags!! Let's review the swags so we know who's giving us good stuff\n14:40 - Quang Vu - Enhancing My Archery Practice with Computer Vision\n18:55 - Meagen Voss - Maaah! How I Killed My Site with a Goat Gif\n24:25 - Will Lachance - How much energy will my solar panels produce?\n29:10 - Amanda Lundberg - Captioner is Human\n33:55 - Thomas Weiss - Predicting Fire Weather Using Historical RAWS Data\n38:25 - Tom Rutherford - The power and danger of os.fork\n42:45 - Cody Maloney - Remember to .close() file-like objects\n47:25 - Anthony Shaw - CSnakes: Python in .NET\n52:55 - Trey Hunner - Systems, gates, and rage",
        "thumbnail": "https://i.ytimg.com/vi_webp/Uuhu-F05A7k/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Uuhu-F05A7k",
        "original_url": "https://www.youtube.com/watch?v=Uuhu-F05A7k"
    },
    {
        "index": 6,
        "title": "Lightning Talks - Saturday, May 17, 2025 AM",
        "url": "https://www.youtube.com/watch?v=47NJt_3ED_k",
        "video_id": "47NJt_3ED_k",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 3142,
        "view_count": 287,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "A collection of lightning talks made by the community.\n\n2:05 - Mario Munoz - ORM? OMG!!\n7:20 - Maya Kerostasia - How a car mechanic became a developer\n13:15 - Joel Natividad - Blazing Fast Automagical Metadata\n18:15 - Alex Ambrioso - Music, LilyPond, and Python\n23:00 - Fay Shaw - MOSEY - Data for pedestrian safety\n21:00 - Anjali Datta - Why MRI? Why Python for MRI?\n27:15 - Mylo Dove - Using Python, websockets, and local LLMs to make a Sony AIBO more sociable.\n32:20 - Eric Matthes - django-simple-deploy: Deployment, for Djangonauts with deadlines\n37:15 - Matt Leaverton - Python and Lasers\n40:40 - Tristan Shippen - If Paint Splatters Could Sing, They’d Probably Sound Awful\n46:05 - Wenqing Mao - pip install patience",
        "thumbnail": "https://i.ytimg.com/vi_webp/47NJt_3ED_k/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=47NJt_3ED_k",
        "original_url": "https://www.youtube.com/watch?v=47NJt_3ED_k"
    },
    {
        "index": 7,
        "title": "Lightning Talks - Saturday, May 17, 2025 PM",
        "url": "https://www.youtube.com/watch?v=i04CNFgxbAk",
        "video_id": "i04CNFgxbAk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 3671,
        "view_count": 405,
        "like_count": 14,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "A collection of lightning talks made by the community.\n\n1:05 - Ee Durbin - It's PyCon US Time!\n5:30 - Jay Miller - What can you accomplish in 1.25 years? - Black Python Devs\n8:50 - Georgi Ker - It's just an online conference. How hard can it be?\n13:55 - Anthony Sottile - Pie, Pi, and PyPI\n15:45 - Molly de Blanc - Some Potentially Divisive Opinions about Codes of Conduct\n21:00 - Anjali Datta - Why MRI? Why Python for MRI?\n26:40 - Michael duPont - Read the Weather Like a Pilot\n32:00 - Marcelo Elizeche Landó - AireLib.re: Building a low cost air quality sensor network\n37:20 - Peter Sobot - So, You Want To Give A Talk - Five Ways to Keep Your Audience Off of Their                         Phones\n42:40 - Sophia McKeever - Art in Code - Our Emotions Reflected in Code\n48:30 - KwonHan Bae - One Bagel to Feed Them All\n52:10 - Mason Egger - Regex or Line Noise, Can You Tell the Difference?\n56:25 - Mariatta Wijaya - How to say thanks to Python People",
        "thumbnail": "https://i.ytimg.com/vi/i04CNFgxbAk/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=i04CNFgxbAk",
        "original_url": "https://www.youtube.com/watch?v=i04CNFgxbAk"
    },
    {
        "index": 8,
        "title": "Lightning Talks - Sunday, May 18th, 2025 AM",
        "url": "https://www.youtube.com/watch?v=lXngPPRaqGg",
        "video_id": "lXngPPRaqGg",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 4090,
        "view_count": 798,
        "like_count": 17,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "A collection of lightning talks made by the community.\n\n1:15 - Illirik Smirnov - Phone numbers and you: tips, tricks, and footguns\n5:15 - Evan Kohilas - What have they done! Why is `re.sub` changing from Python 3.13?\n9:55 - Adam Silkey - \"Solving\" Python Packaging on Windows, once and for all\n12:00 - Jonathan Daniel - Using `uv pip` to accelerarte Docker\n17:00 - Takanori Suzuki - Put the Cat Emoji in your documents!\n22:30 - Jing Cao - What I learned going on strike with the NYTimes Tech Guild\n28:00 - Michael McCaffrey - Overcoming ADHD and anxiety to achieve long-term goals\n32:50 - Joongi Kim - My 10 years with PyCon KR\n38:10 - Dave Peck - A whirlwind tour of t-strings!\n43:45 - Sheena O'Connell - Python in Africa\n48:00 - Conference Announcements",
        "thumbnail": "https://i.ytimg.com/vi_webp/lXngPPRaqGg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=lXngPPRaqGg",
        "original_url": "https://www.youtube.com/watch?v=lXngPPRaqGg"
    },
    {
        "index": 9,
        "title": "503 days working full-time on FOSS: lessons learned - Rodrigo Girão Serrão",
        "url": "https://www.youtube.com/watch?v=iURLDirfmno",
        "video_id": "iURLDirfmno",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1893,
        "view_count": 344,
        "like_count": 6,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "I worked full-time on a Python FOSS project (Textual) for 503 days, so what did I learn?\n\nAm I a better (Python) programmer? Am I a better teammate? Am I a better person?\n\nIn this talk, I will share some lessons I learned over the course of these 503 days:\n\n    How to get a tech job in this day & age\n    How to put your ego aside when working with others\n    How to deal with mistakes\n    How to interact with users & contributors online\n    How it feels to collaborate to a large codebase\n\nAs for the first 3 questions... Ask my colleagues!",
        "thumbnail": "https://i.ytimg.com/vi_webp/iURLDirfmno/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=iURLDirfmno",
        "original_url": "https://www.youtube.com/watch?v=iURLDirfmno"
    },
    {
        "index": 10,
        "title": "Or Else! An Exploration of Obscure Control Flow - Amethyst Reese 🌸",
        "url": "https://www.youtube.com/watch?v=zFzEIIl3dEs",
        "video_id": "zFzEIIl3dEs",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1402,
        "view_count": 687,
        "like_count": 22,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Everyone knows how an if-else block works, but what about a for-else block? Or try-except-else? What do those do, and how can they help us write cleaner code? What other hidden gems await us in the halls of Python grammar? Come join us for an adventure into depths of the Python world less traveled.\n\nWe'll start with a brief look at the fundamentals of program control flow, and how our choices as developers influence the readability and maintainability of our code. We'll look at some easy ways to use lesser-known syntax elements to make common code patterns more obvious, and compare and contrast them with equivalent alternatives.\n\nNext, we'll start to pull back the curtains a bit on how Python handles more complex control flow mechanisms, like generators and decorators, and look at ways to leverage those features to build higher order functionality. Lastly, we'll get a bit reckless and look at how Python makes it possible to create our own systems for control flow, and consider committing some light crimes in the name of code readability.\n\nWe might even implement the highly desired \"do-while\" loop while we're at it.",
        "thumbnail": "https://i.ytimg.com/vi_webp/zFzEIIl3dEs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=zFzEIIl3dEs",
        "original_url": "https://www.youtube.com/watch?v=zFzEIIl3dEs"
    },
    {
        "index": 11,
        "title": "Why `len('😶‍🌫️') == 4` and other weird things you should know about strings in Python",
        "url": "https://www.youtube.com/watch?v=np-xKVMIKcY",
        "video_id": "np-xKVMIKcY",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1409,
        "view_count": 681,
        "like_count": 24,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Marie Roald and Yngve Mardal Moe\n\nStrings in Python behave in all sorts of unexpected ways: len('😶‍🌫️') == 4, 'ñ' != 'ñ', 'dlrow olleh'.split()[1] == 'olleh'! How is this possible? And importantly, why should you care?\n\nIn this presentation, we’ll give a brief introduction to text encoding, the different Unicode standards and how Python encodes strings before we dive deep into Unicode oddities. We’ll cover how one code point can represent multiple characters, why converting between upper-case and lower-case characters should be locale-dependent and how emoji’s work. Finally, we will discuss some best practices for handling unicode input in Python.\n\nAfter this talk, you'll have a better understanding of strings in Python, the Unicode character encoding and you’ll be aware of some common pitfalls and how to avoid them.",
        "thumbnail": "https://i.ytimg.com/vi_webp/np-xKVMIKcY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=np-xKVMIKcY",
        "original_url": "https://www.youtube.com/watch?v=np-xKVMIKcY"
    },
    {
        "index": 12,
        "title": "Phantom Dependencies: is your requirements.txt haunted? - Seth Michael Larson",
        "url": "https://www.youtube.com/watch?v=x9K3xPmi_tg",
        "video_id": "x9K3xPmi_tg",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1585,
        "view_count": 469,
        "like_count": 13,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Did you know there’s more than Python code included in Python packages? This might be a surprise, especially if you’ve inspected your list of dependencies and only found exactly what you've pip-installed. There's something else lurking in the dark corners of your virtual environments.\n\nModern software systems are complex, graph-like, and difficult to measure by both humans and our tools. Luckily there’s an answer: Software Bill-of-Materials (SBOMs). SBOMs can describe any amalgamation of Python, C, C++, Rust, and JavaScript in your Python application which enables static code analysis, license compliance, vulnerability management, and complying with new security regulations.\n\nBy the end of this talk you'll know what Software Bill-of-Materials documents are, why they are useful, and what you need to do when someone asks for one!",
        "thumbnail": "https://i.ytimg.com/vi_webp/x9K3xPmi_tg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=x9K3xPmi_tg",
        "original_url": "https://www.youtube.com/watch?v=x9K3xPmi_tg"
    },
    {
        "index": 13,
        "title": "Cython in Practice: A Deep Dive into Legacy C Integration and Debugging - Maryanne Wachter",
        "url": "https://www.youtube.com/watch?v=rf_OJ2Egrj4",
        "video_id": "rf_OJ2Egrj4",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1696,
        "view_count": 305,
        "like_count": 3,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Full title: \"Cython in Practice: A Deep Dive into Legacy C Integration and Debugging\"\n\nIn Cython in Practice, we'll go over the benefits and challenges of utilizing Cython as a way to utilize legacy C/C++ programs and libraries within Python applications. Cython's capabilities permit users to use Python-like syntax to integrate with existing C code and build their own library and program interfaces accessible from both C and Python. This talk will cover essential tools and workflows for building with Cython and what the interface looks like for integrating with legacy C code, and how to build and package a Cython extension with Poetry and uv.\n\nHowever, utilizing the full powers of Cython is not without its own set of challenges. The presentation will also provide practical insights into common errors encountered during build and runtime phases while developing in Cython. Attendees will learn how to navigate these issues, using a detailed account of the specific obstacles faced when wrapping a legacy C library for Python via Cython. We will discuss different memory management and debugging tools, with a focus on Valgrind, and how to utilize these tools during development in Cython.",
        "thumbnail": "https://i.ytimg.com/vi_webp/rf_OJ2Egrj4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=rf_OJ2Egrj4",
        "original_url": "https://www.youtube.com/watch?v=rf_OJ2Egrj4"
    },
    {
        "index": 14,
        "title": "Inclusive Data for 1.3 Billion: Designing Accessible Visualizations",
        "url": "https://www.youtube.com/watch?v=WZMo6QG1j98",
        "video_id": "WZMo6QG1j98",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1971,
        "view_count": 257,
        "like_count": 3,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Pavithra Eswaramoorthy and Frank Elavsky\n\nAccording to the World Health Organization (WHO), an estimated 1.3 billion people (1 in 6 individuals) experience a disability, and nearly 2.2 billion people (1 in 5 individuals) have vision impairment. Improving the accessibility of visualizations will enable more people to participate in and engage with our data analyses.\n\nIn this talk, we’ll discuss some principles and best practices for creating more accessible data visualizations. It will include tips for individuals who create visualizations, as well as guidelines for the developers of visualization software to help ensure your tools can help downstream designers and developers create more accessible visualizations.\n\nSpecifically, we will cover:\n\n    What makes data visualizations inaccessible? We will cover accessibility fundamentals like color contrast, alternative text descriptions, keyboard navigation support, screen reader compatibility, and more, with specific examples and demonstrations.\n    Are Python data visualization tools accessible? We will teach how to analyze the visualization landscape and discuss how tool developers can begin and prioritize improvements.\n    How accessible is my visualization? We will demonstrate how to conduct accessibility audits for data visualization tools by performing and documenting two accessibility evaluation tests live.\n\nThis talk will use examples from our ongoing work to improve the accessibility of Bokeh, a Python library for creating interactive data visualizations for web browsers. We hope this talk enables you to take the first few steps in making your next data visualization and your visualization tools, more accessible.",
        "thumbnail": "https://i.ytimg.com/vi_webp/WZMo6QG1j98/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=WZMo6QG1j98",
        "original_url": "https://www.youtube.com/watch?v=WZMo6QG1j98"
    },
    {
        "index": 15,
        "title": "NLP para la preservación del lenguaje indígena Quechua - Carla Marcela Florida Román",
        "url": "https://www.youtube.com/watch?v=rE5Ct1vVYPQ",
        "video_id": "rE5Ct1vVYPQ",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1837,
        "view_count": 68,
        "like_count": 1,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "NLP para la preservación del lenguaje indígena Quechua en Bolivia\n\nEl quechua, hablado por más de 2.8 millones de personas en Bolivia, es uno de los idiomas indígenas más importantes del país. Sin embargo, enfrenta serias amenazas debido a la modernización y la globalización. Esta charla explora cómo las técnicas de Procesamiento de Lenguaje Natural (NLP) pueden ser una herramienta crucial para la revitalización y preservación del quechua, asegurando su uso en el ámbito digital y su transmisión a futuras generaciones.\nContenido principal:\n\n    Contexto y relevancia: En Bolivia, el 21% de la población habla quechua, lo que lo convierte en un idioma vital para la cultura del país. Sin embargo, el uso del quechua está en declive, especialmente entre los jóvenes.\n\n    Datos lingüísticos en quechua: Existen pocos recursos digitales y corpus disponibles en quechua, lo que dificulta la creación de tecnologías lingüísticas. Sin embargo, algunos esfuerzos están comenzando a surgir en la comunidad.\n\n    Desafíos técnicos: Los modelos preentrenados para lenguas de bajo recurso como el quechua siguen siendo un reto debido a la falta de datos estructurados y herramientas de procesamiento.\n    Impacto social y cultural: La preservación del quechua a través de tecnologías NLP puede tener un impacto significativo en comunidades bolivianas, promoviendo el acceso a la información en su lengua materna y mejorando la visibilidad de su cultura.\n\nObjetivo:\n\nInspirar a la comunidad de Python y NLP a participar en proyectos que utilicen la tecnología para revitalizar el quechua en Bolivia, un idioma con una rica herencia cultural que necesita urgentemente soluciones digitales para su preservación y expansión.",
        "thumbnail": "https://i.ytimg.com/vi_webp/rE5Ct1vVYPQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=rE5Ct1vVYPQ",
        "original_url": "https://www.youtube.com/watch?v=rE5Ct1vVYPQ"
    },
    {
        "index": 16,
        "title": "Elastic Generics: Flexible Static Typing with TypeVarTuple and Unpack - Christopher Ariza",
        "url": "https://www.youtube.com/watch?v=fmczXlnQ3cs",
        "video_id": "fmczXlnQ3cs",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1728,
        "view_count": 306,
        "like_count": 7,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Since Python 3.5, generic tuples can be parameterized as either orderings of component types (e.g. tuple[int, str]) or unbound sequences of a single type (e.g. tuple[float, ...]). Yet sometimes we need both: for example, a tuple that starts with an int and a str and follows with zero or more floats might describe a row in a dataset that starts with identifiers and follows with a variable number of observations. While we might want to define a generic Record class that can be elastically parameterized in this manner, doing so was not practical until the introduction of TypeVarTuple and Unpack in Python 3.11.\n\nWith TypeVarTuple, a generic Record class can be made concrete as Record[int, str], Record[int, str, float], or even Record[int, str, *tuple[float, ...]]: the same class can be parameterized as requiring two types, three types, or required int and str types followed by zero or more float types (as given with the Unpack notation *tuple[float, ...]).\n\nThis presentation will introduce TypeVarTuple and Unpack. Starting with annotated tuple types, the flexible, expressive range of mixture between fixed and unbound types will be demonstrated with mypy validation. Next, a variadic generic class, Record, will demonstrate the benefits of such elastic typing.\n\nFinally, a compelling application of TypeVarTuple will be demonstrated. While DataFrames are widely used, only the StaticFrame library, leveraging TypeVarTuple, offers a comprehensively generic DataFrame. DataFrames have variable numbers of columns, each sometimes a different type; further, while DataFrames might have tens or hundreds of columns, it is common for such datasets to have a fixed number of heterogeneously typed columns followed by a variable number of uniformly typed columns. With TypeVarTuple, this type of flexible DataFrame typing is now possible.",
        "thumbnail": "https://i.ytimg.com/vi_webp/fmczXlnQ3cs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=fmczXlnQ3cs",
        "original_url": "https://www.youtube.com/watch?v=fmczXlnQ3cs"
    },
    {
        "index": 17,
        "title": "Intuition vs. Reality: Surprising Truths in Python Performance - Arthur Pastel & Adrien Cacciaguerra",
        "url": "https://www.youtube.com/watch?v=TEF6yhdOwEA",
        "video_id": "TEF6yhdOwEA",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2504,
        "view_count": 731,
        "like_count": 23,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "How often do we trust our instincts when optimizing code? In Python, performance frequently defies intuition, leading us to make changes that might slow things down instead of speeding them up. This talk explores surprising truths about Python performance and showcases why measurement tools are essential for finding the real bottlenecks in our code.\n\nConsider this: is it faster to count even numbers in a list using len([x for x in arr if x % 2 == 0]) or sum(1 for x in arr if x % 2 == 0)? While one might seem more Pythonic or efficient at first glance, the performance results might surprise you.\n\nThrough an interactive format, we’ll quiz you on performance scenarios using real-world examples. From counting even numbers to rewriting Python code in Rust, each case study will challenge assumptions about what makes code faster.\n\nPlan:\n\n    Introduction: Why intuition often fails in software performance\n    Interactive performance case studies: Real-world examples that will surprise you\n        Counting even numbers\n        String concatenation\n        Pathfinding optimization\n        etc.\n    Conclusion: How do we become consistent about optimizations?\n\nBy the end, you’ll understand why performance measurements matter and leave with practical insights and tools to improve Python performance systematically.",
        "thumbnail": "https://i.ytimg.com/vi_webp/TEF6yhdOwEA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=TEF6yhdOwEA",
        "original_url": "https://www.youtube.com/watch?v=TEF6yhdOwEA"
    },
    {
        "index": 18,
        "title": "When GPUs Make Python Slower: Patterns and Pitfalls - Kaashif Hymabaccus",
        "url": "https://www.youtube.com/watch?v=WfXfj29KhLo",
        "video_id": "WfXfj29KhLo",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1974,
        "view_count": 297,
        "like_count": 9,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "When does GPU acceleration slow down your Python code? More often than you might think! Join me to explore the world of GPU acceleration, in which I will walk through some use cases where it makes your code faster and slower, and sometimes much slower. I’ll explain what GPU accelerated libraries like Numba, CuPy, cuDF and cuGraph really do, and we’ll dive into string processing, memory transfer overhead, and real-world case studies in processing time-series data. Whether you’re new to GPU acceleration or already using it in production, you’ll better understand when using GPUs help, when it doesn’t, and when you should reach for other ways to make your Python code faster.",
        "thumbnail": "https://i.ytimg.com/vi_webp/WfXfj29KhLo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=WfXfj29KhLo",
        "original_url": "https://www.youtube.com/watch?v=WfXfj29KhLo"
    },
    {
        "index": 19,
        "title": "Writing Extension Modules To Be Interruptible - Zack Weinberg",
        "url": "https://www.youtube.com/watch?v=_XnYI2Kcck0",
        "video_id": "_XnYI2Kcck0",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1895,
        "view_count": 174,
        "like_count": 5,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Have you ever told Python to crunch some numbers, realized right after pressing RETURN that you made a mistake setting up the problem, hit control-C to stop it again...and then sat there twiddling your thumbs for a surprisingly long time as nothing seemed to happen?\n\nThe short version of what's going on when this happens is, the Python interpreter is notified of your having hit control-C almost immediately, but it has to wait to throw KeyboardInterrupt until the extension module that's doing the number crunching finishes its calculation and returns control to the interpreter.\n\nIn this talk we will discuss why the interpreter works that way (and why it has to work that way), what extension module authors can do today to make their extensions notice control-C promptly, and how we can all work toward a future where it's easy and natural for extension module authors to write extensions that don't make you wait for them to stop.",
        "thumbnail": "https://i.ytimg.com/vi_webp/_XnYI2Kcck0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=_XnYI2Kcck0",
        "original_url": "https://www.youtube.com/watch?v=_XnYI2Kcck0"
    },
    {
        "index": 20,
        "title": "Reduce the environmental footprint of your Python programs - Apoorv Garg",
        "url": "https://www.youtube.com/watch?v=XqFbHZ-YfeA",
        "video_id": "XqFbHZ-YfeA",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1654,
        "view_count": 185,
        "like_count": 4,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "As we witness the cutting-edge developments in Artificial Intelligence, the carbon footprint of our code base can no longer be brushed off as insignificant. In every respect, as developers, we have a responsibility to take the lead in implementing sustainable coding practices. This presentation explores Python techniques that can be embedded in one’s code that will help reduce cycles, lower resource dependencies, and decrease energy usage without degrading performance.\n\nMore than just tech tips, this talk is going to focus on the why—looking into the expanding CO2 of the AI and tech space, what it means for our planet, and how it points to the importance of responsible development. The audience will discover that simple but conscious changes in one’s handy work, such writing better algorithms, datamodelling, and using greener tools can somehow make a positive impact to the environment.\n\nThis talk is not only about utilizing new technologies correctly, it is also about changing the perception of our field. Let’s be responsible — let’s develop projects that will not harm the environment. Together, we can progress and adapt our development processes to the current climate change crisis – the one in which development and innovative efforts go hand in hand with taking care of the environment. So let’s code with purpose.",
        "thumbnail": "https://i.ytimg.com/vi_webp/XqFbHZ-YfeA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=XqFbHZ-YfeA",
        "original_url": "https://www.youtube.com/watch?v=XqFbHZ-YfeA"
    },
    {
        "index": 21,
        "title": "Metaprogramming with Decorators, Metaclasses, and Dynamic Code Generation - Aditya Mehra",
        "url": "https://www.youtube.com/watch?v=kKJR-aYew2o",
        "video_id": "kKJR-aYew2o",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1746,
        "view_count": 481,
        "like_count": 14,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Full title: \"Unlocking Python's Power: A Practical Guide to Metaprogramming with Decorators, Metaclasses, and Dynamic Code Generation\"\n\nThis presentation delves into advanced Python programming techniques related to metaprogramming, which allow developers to write code that can evaluate, modify, or build upon other code.\n\nWe will explore key metaprogramming constructs—decorators, metaclasses, and dynamic code generation—through practical examples and real-world applications. This session will provide the audience with the tools and insights to take advantage of the most advanced Python programming techniques to help them plan, optimize workflows, or write dynamic applications Perfect for intermediate to advanced developers who are ready to take their coding skills to the next level!",
        "thumbnail": "https://i.ytimg.com/vi_webp/kKJR-aYew2o/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=kKJR-aYew2o",
        "original_url": "https://www.youtube.com/watch?v=kKJR-aYew2o"
    },
    {
        "index": 22,
        "title": "Más allá de Try-Except: La frontera de Python en el manejo de errores con Monadas y Railway Magic",
        "url": "https://www.youtube.com/watch?v=jTsiY0qtT-M",
        "video_id": "jTsiY0qtT-M",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1846,
        "view_count": 49,
        "like_count": 1,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Sebastian Arias\n\nQuiero que lleves tus habilidades de manejo de errores en Python a un nivel superior, haciendo que tu código sea más limpio, mantenible y menos propenso a fallos, incluso a medida que crezca en complejidad.\n\nLas estrategias tradicionales de manejo de excepciones en Python, como LBYL (\"Look Before You Leap\") y EAFP (\"Easier to Ask for Forgiveness than Permission\"), funcionan bien en contextos simples, pero rápidamente se vuelven difíciles de manejar a medida que las bases de código crecen. Esto resulta en problemas de legibilidad, complejidad innecesaria y riesgo de errores no manejados adecuadamente, lo cual puede llevar a fallos inesperados.\n\nEn mi charla, \"Más allá de Try-Except: La frontera de Python en el manejo de errores con Monads y Railway Magic\", exploraremos un enfoque innovador para la gestión de errores en Python. Utilizaremos los monads, específicamente con la Results Library, y el método Railway-Driven Development, que nos permitirá adoptar conceptos de programación funcional para construir una estructura sólida y predecible para el manejo de errores.\n\nA través de ejemplos prácticos, demostraré cómo este enfoque facilita la integración de características avanzadas de Python, como pattern matching, haciendo que la gestión de errores sea más clara y eficiente. Al final de la charla, tendrás las herramientas necesarias para implementar un sistema de manejo de errores más robusto y mantenible en tus propios proyectos, superando las limitaciones de las prácticas tradicionales y mejorando significativamente la calidad de tu código.",
        "thumbnail": "https://i.ytimg.com/vi_webp/jTsiY0qtT-M/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=jTsiY0qtT-M",
        "original_url": "https://www.youtube.com/watch?v=jTsiY0qtT-M"
    },
    {
        "index": 23,
        "title": "Transformando Gafas en Asistentes Inteligentes: Open Source Vision Language Models",
        "url": "https://www.youtube.com/watch?v=xbGAmNwxaUc",
        "video_id": "xbGAmNwxaUc",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1806,
        "view_count": 50,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Alejandro Núñez Arroyo\n\nEn esta charla, aprenderemos cómo transformar unas gafas comunes en un Asistente Inteligente por menos de 30 dólares, utilizando hardware accesible y modelos Open Source. Aprovecharemos los Vision Language Models (VLM), una tecnología que integra visión por computadora y procesamiento del lenguaje natural para crear inteligencia artificial multimodal, capaz de analizar imágenes y texto simultáneamente y generar respuestas en lenguaje natural.\n\nExploraremos el origen y desarrollo de los Open VLMs, analizando su impacto, evolución y el enorme potencial que representan. Profundizaremos en su arquitectura, componentes esenciales y aplicaciones prácticas. Los asistentes aprenderán a crear sus propias gafas inteligentes, conociendo los requisitos técnicos necesarios, y podrán interactuar con varios prototipos funcionales disponibles durante la charla. Esto les permitirá probar las gafas en tiempo real y experimentar de primera mano como estos modelos responden y se adaptan a diversos escenarios. Además, se ofrecerá una guía práctica para configurar los modelos, realizar inferencias en sus computadoras y optimizarlos para funcionar con menos de 3 GB de memoria, haciendo esta tecnología más accesible y replicable para todos.\n\nFinalmente, exploraremos los desafíos actuales en la implementación de estos sistemas, incluyendo la optimización del uso de memoria y el desarrollo de técnicas de cuantización más eficientes. A partir de este análisis, reflexionaremos sobre el futuro de estas tecnologías en aplicaciones de inteligencia artificial, subrayando el papel clave de la colaboración en la comunidad Open Source. Concluiremos destacando el potencial transformador de estos dispositivos y su capacidad para redefinir nuestra interacción con el entorno en la vida cotidiana.",
        "thumbnail": "https://i.ytimg.com/vi_webp/xbGAmNwxaUc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xbGAmNwxaUc",
        "original_url": "https://www.youtube.com/watch?v=xbGAmNwxaUc"
    },
    {
        "index": 24,
        "title": "Going From Notebooks to Scalable Systems - Catherine Nelson",
        "url": "https://www.youtube.com/watch?v=o4hyA4hotxw",
        "video_id": "o4hyA4hotxw",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1665,
        "view_count": 331,
        "like_count": 12,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Jupyter Notebooks are a fantastic tool that make it very easy to get started on a project. But often, you’ll reach a point where you want to make your code part of a larger system, and you’ll need to change your way of working. You’ll need to go from code that gives you some insights or results to robust, reproducible code that runs automatically. In this talk, I’ll explain strategies that will help you smoothly refactor your code. I’ll introduce tools that will help you, and discuss the skills that you’ll need. Whether you're a data scientist looking to productionize your models or a developer working with data-heavy applications, you'll gain practical knowledge to help you move from exploratory notebooks to robust, scalable systems.",
        "thumbnail": "https://i.ytimg.com/vi_webp/o4hyA4hotxw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=o4hyA4hotxw",
        "original_url": "https://www.youtube.com/watch?v=o4hyA4hotxw"
    },
    {
        "index": 25,
        "title": "Bridging Python and Apache Iceberg™: The Power of PyIceberg - Rushan Jiang",
        "url": "https://www.youtube.com/watch?v=gUvEwBUKizo",
        "video_id": "gUvEwBUKizo",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1672,
        "view_count": 302,
        "like_count": 10,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Using tools like PyArrow, Pandas, or Polars makes it easy to work with dataframes. However, as datasets scale to terabytes, managing tables, evolving schemas, and ensuring consistency across tools becomes increasingly complex. Apache Iceberg™, an open table format, addresses these challenges, and, with PyIceberg, seamlessly integrates with your favorite Python-based tools.\n\nWe will start with an introduction to Iceberg and PyIceberg, focusing on the features PyIceberg brings to the Python ecosystem such as schema evolution and transactional guarantees. We will demonstrate how PyIceberg supports interoperability between Iceberg tables and Python-native dataframes like PyArrow and Pandas, using practical examples of creating, querying, and writing to Iceberg tables.\n\nFrom these practical examples, we will dive deeper to explore how Iceberg tables evolve during these operations. This includes an in-depth look at Iceberg's file structure—metadata files, manifest lists, and manifests—and how PyIceberg leverages this structure to perform transactional table updates and optimize query planning, ensuring reliable performance at scale.\n\nFinally, we will discuss PyIceberg’s advanced features, including schema evolution, hidden partitioning, and time travel, which make table management efficient and flexible.",
        "thumbnail": "https://i.ytimg.com/vi_webp/gUvEwBUKizo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=gUvEwBUKizo",
        "original_url": "https://www.youtube.com/watch?v=gUvEwBUKizo"
    },
    {
        "index": 26,
        "title": "Programming for Yourself - Paul Ganssle",
        "url": "https://www.youtube.com/watch?v=NNbq-o5HODY",
        "video_id": "NNbq-o5HODY",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1819,
        "view_count": 431,
        "like_count": 15,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "The career benefits of learning programming have become increasingly obvious over time, but few people talk about another great super-power you get from learning to program: the ability to make things that solve your own problems.\n\nIn this talk, I'll go through a few case studies from my own life wherein knowing how to program not only allowed me to solve problems for myself, but also allowed me to recognize that the problem I was having had a solution at all.\n\nAdditionally, I'll talk about ways the approach to engineering changes (and doesn't change!) when programming bespoke applications for a small audience.",
        "thumbnail": "https://i.ytimg.com/vi_webp/NNbq-o5HODY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=NNbq-o5HODY",
        "original_url": "https://www.youtube.com/watch?v=NNbq-o5HODY"
    },
    {
        "index": 27,
        "title": "Cómo llevar tus presentaciones técnicas al siguiente nivel con Python + Quarto - Riva Quiroga",
        "url": "https://www.youtube.com/watch?v=xE9AUygcovE",
        "video_id": "xE9AUygcovE",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1709,
        "view_count": 69,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Da lo mismo si trabajas como dev o haciendo ciencia de datos: crear buenas presentaciones es un aspecto clave para dar a conocer lo que haces. Una buena presentación nos permite mostrar la relevancia de nuestro trabajo de una forma clara y convincente, y destacar el valor de nuestras contribuciones técnicas. En este contexto, un elemento fundamental de cualquier presentación es un set de slides que se destaque. En esta charla presentaremos 10 simples reglas para crear slides en formato HTML usando Python y Quarto, un sistema de publicación técnico y científico de código abierto. La audiencia se llevará sugerencias concretas sobre cómo mejorar sus próximo set de slides y el código para implementarlas.\n\n¿Por qué Quarto? Quarto es una excelente herramienta para crear slides sobre contenido técnico porque permite integrar código, datos y texto en un solo archivo. A lo largo de la presentación nos enfocaremos en la creación de slides en formato HTML, ya que este tiene características que lo hacen particularmente útil para presentar contenido técnico. Por ejemplo, ofrece opciones flexibles para mostrar y ocultar código y para ajustar la cantidad de información mostrada, lo que nos permite crear \"capas\" de contenido. Así, es posible presentar ideas claves para una audiencia no técnica y al mismo tiempo incluir código que se muestra solo si es necesario. Incluso, gracias al poder de WebAssembly + pyodide, es posible hacer que aparezca un intérprete de Python directamente en nuestra presentación, para poder hacer una demostración de algo en el momento, si es necesario. Todas estas opciones nos permiten crear presentaciones adaptables a públicos con distintos niveles de experiencia o conocimiento técnico.",
        "thumbnail": "https://i.ytimg.com/vi_webp/xE9AUygcovE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xE9AUygcovE",
        "original_url": "https://www.youtube.com/watch?v=xE9AUygcovE"
    },
    {
        "index": 28,
        "title": "Notes, Groups and Stars: exceptional new features of Python 3.11! - Zac Hatfield-Dodds",
        "url": "https://www.youtube.com/watch?v=x5WdMYfsxnQ",
        "video_id": "x5WdMYfsxnQ",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1503,
        "view_count": 315,
        "like_count": 6,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Notes, Groups, and Stars aren't just for concerts - they're also exception-ally useful features for error handling, new in Python 3.11!\n\nIn this talk, we'll explore a neglected corner of Python: exceptions and error handling! What would we like Python to do for us, when our programs do something we didn't expect? How can we help other programmers understand failures in our code?\n\nWe'll take a broad view, starting from fundamentals like exceptions vs return values, before zooming through a history of tracebacks and chaining, and arriving at the glorious present with .add_note(), ExceptionGroup, and except*. You'll leave not just educated but enthused and excited - but perhaps even a ten-ex except-star developer!",
        "thumbnail": "https://i.ytimg.com/vi_webp/x5WdMYfsxnQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=x5WdMYfsxnQ",
        "original_url": "https://www.youtube.com/watch?v=x5WdMYfsxnQ"
    },
    {
        "index": 29,
        "title": "The Zen of Polymorphism: Choosing between isinstance(), methods, and @singledispatch - Brett Slatkin",
        "url": "https://www.youtube.com/watch?v=hidy15rK2a4",
        "video_id": "hidy15rK2a4",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2562,
        "view_count": 739,
        "like_count": 30,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Python is a multi-paradigm language that embraces both functional programming and object-oriented programming (OOP) approaches to writing code. OOP is especially popular, in large part due to how it enables polymorphism (for example, calling speak() on a Dog object returns \"woof\", while a Cat object's method returns \"meow\".) However, OOP has many downsides that are often not understood until it's too late in the lifecycle of building a program. Fortunately, Python also enables developers to achieve similar behavior to polymorphism while using simple functions and plain data objects instead of classes.\n\nThis talk will detail three different approaches provided by Python to achieve polymorphism behavior in a realistic program. It will compare and contrast their relative strengths and weaknesses. It will show how the most naive approach, which relies on isinstance() checks, leads to severe code duplication. It will show how OOP method polymorphism leads to code being organized along the wrong axis, which hurts understandability, debugging, and maintainability in practice. It will also demonstrate a less commonly known part of the built-in functools library called @singledispatch that strikes a perfect balance between functional and OOP programming styles.\n\nFinally, you'll learn how @singledispatch works under the covers, and how to build or integrate similar functionality into your own programs so you can realize the benefits of polymorphism while avoiding the pitfalls.",
        "thumbnail": "https://i.ytimg.com/vi_webp/hidy15rK2a4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=hidy15rK2a4",
        "original_url": "https://www.youtube.com/watch?v=hidy15rK2a4"
    },
    {
        "index": 30,
        "title": "Selenium with Python using Robot Framework - Monica Oyugi",
        "url": "https://www.youtube.com/watch?v=lemECmV-epg",
        "video_id": "lemECmV-epg",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1462,
        "view_count": 217,
        "like_count": 4,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Ensuring software quality is more important than ever. In this talk, we'll explore how to harness the power of Selenium with Python alongside the Robot Framework to create robust and efficient automated tests. As QA engineers, we face numerous challenges in delivering quality software under tight deadlines, and integrating these tools can streamline our testing processes. I'll start by understanding the fundamentals of Selenium and Robot Framework, then walk through setting up our environment and writing our first test suite together. We'll share best practices for maintaining our test scripts and discuss real-world applications demonstrating how these tools can enhance collaboration and improve software quality. By the end of the session, we’ll be equipped with the knowledge and resources to elevate our automation strategies and foster a quality culture in our development teams.",
        "thumbnail": "https://i.ytimg.com/vi_webp/lemECmV-epg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=lemECmV-epg",
        "original_url": "https://www.youtube.com/watch?v=lemECmV-epg"
    },
    {
        "index": 31,
        "title": "Django Asíncrono: Desbloqueando el Poder de la Programación Async - Luis Martinez",
        "url": "https://www.youtube.com/watch?v=pfxOrDx8Pwk",
        "video_id": "pfxOrDx8Pwk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1917,
        "view_count": 101,
        "like_count": 5,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Con la llegada de Django 3.1, el framework dio un gran salto hacia el futuro al integrar soporte para asincronismo. Pero, ¿qué significa esto para quienes desarrollamos aplicaciones web? En esta charla, te voy a enseñar cómo usar las herramientas de asincronismo en Django para construir aplicaciones más rápidas y eficientes.\n\nEmpezaremos con una breve introducción a asyncio, la base del asincronismo en Python. ¿Qué son los event loops? ¿Qué hacen async y await? Si nunca has trabajado con código asíncrono, no te preocupes, aquí lo explicaremos de forma simple.\n\nDespués, entraremos directo en el mundo de Django: * Escribiremos vistas asíncronas (async def) y exploraremos casos prácticos donde el asincronismo realmente marca la diferencia. * Compararemos el rendimiento entre vistas síncronas y asíncronas mediante pruebas reales, mostrando cómo manejar múltiples peticiones a APIs externas de manera eficiente. * Veremos cómo Django adopta la convención de agregar una \"a\" a los métodos asíncronos del ORM (como aget, afirst, alast) para diferenciarlos de sus versiones síncronas. * Discutiremos las limitaciones actuales del ORM de Django (spoiler: sigue siendo síncrono) y cómo manejarlas en proyectos modernos.\n\nPara cerrar, incluiré una demostración práctica y ejemplos de código reales que puedes llevarte a casa.\n\nEsta charla está pensada para desarrolladores de nivel intermedio que quieran llevar sus proyectos Django al siguiente nivel y entender cómo el asincronismo puede transformar la manera en que construimos aplicaciones web.",
        "thumbnail": "https://i.ytimg.com/vi_webp/pfxOrDx8Pwk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=pfxOrDx8Pwk",
        "original_url": "https://www.youtube.com/watch?v=pfxOrDx8Pwk"
    },
    {
        "index": 32,
        "title": "Unlearning SQL - Steven Lott",
        "url": "https://www.youtube.com/watch?v=sFAxHLaVKxk",
        "video_id": "sFAxHLaVKxk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1896,
        "view_count": 552,
        "like_count": 21,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Some people find SQL to be a helpful model for data analysis. They can also find themselves frustrated because some things that seem clear in SQL can seem difficult to restate in Python.\n\nWe'll look at some of the SQL query design patterns in detail. With this, we can formulate Python functions that have the same behavior without the overheads of using an actual database. Even something like SQLite3 involves overheads that can be avoided.\n\nTo keep the talk short, we'll avoid a number of more nuanced SQL features. We'll cover the principle elements of a Select statement including the Group by and Having clauses. This isn't a tutorial, and the audience needs to be comfortable with generator expressions and list comprehensions.\n\nThe concept is to use SQL concepts for initial design, but pivot to Python for a robust implementation.",
        "thumbnail": "https://i.ytimg.com/vi_webp/sFAxHLaVKxk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=sFAxHLaVKxk",
        "original_url": "https://www.youtube.com/watch?v=sFAxHLaVKxk"
    },
    {
        "index": 33,
        "title": "Make Python Talk, Make Python Listen - Al Sweigart",
        "url": "https://www.youtube.com/watch?v=bHUvzkuf3Qk",
        "video_id": "bHUvzkuf3Qk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1556,
        "view_count": 416,
        "like_count": 15,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Third-party packages for Python allow your programs to perform text-to-speech and speech recognition with only a few lines of code. You don't need to understand advanced machine learning algorithms to take advantage of these sophisticated features: even beginners can use these packages. In this talk, you'll learn the PyTTSx3 and gTTS packages to make your programs talk using your operating system's speech engine. You'll also learn how to use the free, offline Whisper package to convert audio files into text strings. The straightforward configuration for these packages mean you can start making immediate use of them in your Python applications. Finally, we cover the yt-dlp package for downloading video and audio files from the web for transcription purposes, and how all of this is being used by the PyVideo.org website.",
        "thumbnail": "https://i.ytimg.com/vi/bHUvzkuf3Qk/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=bHUvzkuf3Qk",
        "original_url": "https://www.youtube.com/watch?v=bHUvzkuf3Qk"
    },
    {
        "index": 34,
        "title": "Cambiando el guión: No estamos solas - DataSoul Podcast - Laura López & Valentina Ariza",
        "url": "https://www.youtube.com/watch?v=EMgj6nuAXrk",
        "video_id": "EMgj6nuAXrk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1524,
        "view_count": 59,
        "like_count": 5,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "¡Hola! Somos Valen y Laura creadoras y hosts de DataSoul Podcast, un espacio seguro para compartir experiencias trabajando en la industria tech, así como hablar de temas de los que poco se habla pero que todos enfrentamos en algún momento. Este podcast quiere ser parte de Pycon US con la presentación de un episodio en vivo donde hablaremos de retos, miedos y la importancia de la comunidad, al momento de hacer un cambio de carrera hacia el mundo de los datos.",
        "thumbnail": "https://i.ytimg.com/vi_webp/EMgj6nuAXrk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=EMgj6nuAXrk",
        "original_url": "https://www.youtube.com/watch?v=EMgj6nuAXrk"
    },
    {
        "index": 35,
        "title": "The Most Bizarre Software Bugs in History - Mia Bajić",
        "url": "https://www.youtube.com/watch?v=gM2J5plaDmw",
        "video_id": "gM2J5plaDmw",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1736,
        "view_count": 334,
        "like_count": 6,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "We've all heard that we should test our software, but what happens when we don't? Sometimes, it leads to strange and unexplainable events.\n\nIs 'testing more' always the right solution? What do these bugs reveal about software and its failures? And how can we use these lessons to build more resilient systems?\n\nLet's take a look at the most bizarre software bugs in history.",
        "thumbnail": "https://i.ytimg.com/vi_webp/gM2J5plaDmw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=gM2J5plaDmw",
        "original_url": "https://www.youtube.com/watch?v=gM2J5plaDmw"
    },
    {
        "index": 36,
        "title": "Diseñando y Construyendo Teclados ⌨️ Personalizados con Python - Carlos A Aranibar",
        "url": "https://www.youtube.com/watch?v=tjGHvj2rsbc",
        "video_id": "tjGHvj2rsbc",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1434,
        "view_count": 33,
        "like_count": 0,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Como programadores, pasamos mucho tiempo tecleando, pero a menudo pasamos por alto cómo el diseño de nuestros teclados afecta nuestra comodidad y productividad. En esta charla, exploraremos los teclados personalizados y cómo Python puede ayudarnos a crear nuestras propias experiencias de typing.\n\nComenzaremos analizando la historia del diseño de teclados y las limitaciones de las distribuciones estándar como el QWERTY. Luego, hablaremos de las ventajas de distribuciones alternativas, como diseños ortolineales y split/divididos, que pueden ayudar a reducir la tensión y mejorar la velocidad de escritura.\n\nA continuación, revisaremos cómo diseñar el PCB (placa de circuito impreso) de un teclado personalizado y aprenderemos a utilizar herramientas de Python como GDSFactory. Aprenderás a colocar las teclas según la forma de tus manos y a crear una distribución que se enfoque en las teclas que más utilizas en tus lenguajes de programación preferidos.\n\nUna vez que tengamos el diseño del PCB, pasaremos a la construcción de nuestro teclado personalizado. Cubriremos los aspectos básicos del ensamblaje para convertir nuestro diseño en un dispositivo real. Finalmente, hablaremos sobre cómo adaptarnos a nuestra nueva distribución de teclado. Veremos herramientas en línea y scripts de Python para analizar nuestros hábitos de mecanografía, ayudándonos a identificar nuestras teclas más comunes y a monitorear nuestro progreso mientras reentrenamos nuestros dedos.\n\nNo se requiere experiencia previa en construcción de teclados o diseño de PCB; solo trae tu curiosidad y ganas de crear una experiencia de escritura personalizada. Al final de esta charla, sabrás cuestionar el diseño de tu teclado actual y quizá te animes a construir y mejorar tu propio teclado personalizado usando Python.",
        "thumbnail": "https://i.ytimg.com/vi/tjGHvj2rsbc/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=tjGHvj2rsbc",
        "original_url": "https://www.youtube.com/watch?v=tjGHvj2rsbc"
    },
    {
        "index": 37,
        "title": "Scale Smarter, Not Harder, with cuPyNumeric. - Irina Demeshko & Quynh L. Nguyen",
        "url": "https://www.youtube.com/watch?v=GjnFkX2z728",
        "video_id": "GjnFkX2z728",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1483,
        "view_count": 109,
        "like_count": 3,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Many data and simulation scientists use NumPy for its ease of use and good performance on CPU. This approach works well for single-node tasks, but scaling to handle larger datasets or more resource-intensive computations introduces significant challenges. Not to mention, using GPUs requires another level of complexity. We present the cuPyNumeric library. cuPyNumeric gives developers the same familiar NumPy interface, but seamlessly distributes work across CPUs and GPUs.\n\nA compelling example when scaling is necessary is when scientists at the SLAC National Accelerator Laboratory need to process a large amount of data within a fixed time window, called beam time. The full dataset generated during experiments is too large to be processed on a single CPU. Additionally, the code often must be modified during the beam time to adapt to changing experimental needs. Being able to use NumPy syntax rather than lower level distributed computing libraries makes these changes quick and easy, allowing researchers to focus on conducting more experiments rather than debugging or optimizing code.\n\ncuPyNumeric is designed to be a drop-in replacement to NumPy. Built on top of task-based distributed runtime from Stanford University, it automatically parallelizes NumPy APIs across all available resources, taking care of data distribution, communication, asynchronous and accelerated execution of compute kernels on both GPUs or multi-core CPUs. In addition, cuPyNumeric can be integrated with other popular Python libraries like SciPy, matplotlib, Jax. With cuPyNumeric, SLAC scientists successfully ran their data processing code distributed across multiple nodes and GPUs, processing the full dataset with a 6x speed-up compared to the original single-node implementation.\n\nIn this talk we showcase the productivity and performance of cuPyNumeric library covering some detail on its implementation.",
        "thumbnail": "https://i.ytimg.com/vi_webp/GjnFkX2z728/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=GjnFkX2z728",
        "original_url": "https://www.youtube.com/watch?v=GjnFkX2z728"
    },
    {
        "index": 38,
        "title": "World's First Undoable Notebook - Zhaoheng Li",
        "url": "https://www.youtube.com/watch?v=SX9wlj-EG7U",
        "video_id": "SX9wlj-EG7U",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1998,
        "view_count": 160,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Interactive Notebooks (e.g., Jupyter, Colab) are widely used for data science tasks such as data analysis, data visualization, and model training. A fundamental limitation of vanilla notebook frameworks is the inability to undo the effect of cell executions on the session state, e.g., users cannot ‘un-drop’ dataframe columns. In this talk, I will describe our ongoing work on adding automated, lightweight checkpointing in notebook sessions to address this issue.\n\nThis talk should be interesting for an intermediate-level audience who have some experience with using Python-based notebooks and common data science libraries (e.g., Pandas, Matplotlib) and have experienced first-hand the various issues of existing notebook frameworks (e.g., no undos, non-persistent state). This talk will assume prior knowledge of notebook basics and terminology (e.g., cell executions, session state).\n\nAttendees will learn about how incremental checkpointing and versioning techniques commonly utilized in databases can be adapted to work well with interactive notebooks. At a more detailed level, they will learn about the characteristics of typical notebook workloads and how information (e.g., dependencies between variables) required for incremental checkpointing can be profiled from cell executions.",
        "thumbnail": "https://i.ytimg.com/vi_webp/SX9wlj-EG7U/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=SX9wlj-EG7U",
        "original_url": "https://www.youtube.com/watch?v=SX9wlj-EG7U"
    },
    {
        "index": 39,
        "title": "The PyArrow revolution in Pandas - Reuven M. Lerner",
        "url": "https://www.youtube.com/watch?v=Cpr0wbopYvU",
        "video_id": "Cpr0wbopYvU",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1905,
        "view_count": 487,
        "like_count": 22,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Pandas has long used NumPy for its back-end storage. But things are changing, and the future of Pandas will likely be tied closely with PyArrow. What are Arrow and PyArrow? How do they affect Pandas users today, and how will they affect us in the future? Is PyArrow always faster than the current Pandas backend? In this talk, I introduce PyArrow, tell you what it does, how we can already use it in our Pandas work, and when it's appropriate for you to use it.",
        "thumbnail": "https://i.ytimg.com/vi_webp/Cpr0wbopYvU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Cpr0wbopYvU",
        "original_url": "https://www.youtube.com/watch?v=Cpr0wbopYvU"
    },
    {
        "index": 40,
        "title": "Working with Audio in Python (feat. Pedalboard) - Peter Sobot",
        "url": "https://www.youtube.com/watch?v=kpKrsFqJgXc",
        "video_id": "kpKrsFqJgXc",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1903,
        "view_count": 264,
        "like_count": 27,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Digital audio has been around for as long as computers, but working with audio data can still be complicated, especially in Python. In this talk, we'll talk about how digital audio works from the ground up (from sounds, to bytes, to files), how you can use Python to do a bunch of really neat things with audio, and how a Python library - Pedalboard - helps make working with audio much easier.\n\nEver used a digital audio workstation (DAW) like GarageBand, Ableton Live, Logic, or Pro Tools? Today's musicians use DAWs as instruments in themselves. But what if you want to combine the power of a DAW with the flexibility of writing your own code?\n\nPedalboard was built to fill this niche: to pull the power of a DAW into your Python code. Pedalboard makes it easy to build and apply audio effects, read and write audio files, and load audio plug-ins (\"VSTs\") without any complicated dependencies or frameworks. Just import pedalboard and go!",
        "thumbnail": "https://i.ytimg.com/vi_webp/kpKrsFqJgXc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=kpKrsFqJgXc",
        "original_url": "https://www.youtube.com/watch?v=kpKrsFqJgXc"
    },
    {
        "index": 41,
        "title": "Beautiful and Balanced: Using Color Theory in Data Visualization - Laura Fisher",
        "url": "https://www.youtube.com/watch?v=M2bMpiztBxQ",
        "video_id": "M2bMpiztBxQ",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1549,
        "view_count": 333,
        "like_count": 17,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "You have just made the most aesthetically pleasing pie chart in the history of data viz - but has your color palette inadvertently introduced a bias to the data you're presenting?\n\nOur brains interpret color contextually: proximity to other colors changes the way we perceive a particular color, making it appear darker or lighter, more prominent or more demure. When presenting data visually, it's important to choose color palettes which do not skew the viewer's perception of the data relationships you're illustrating.\n\nIn this talk, we'll take a peek at some basic color theory based on the work of Josef Albers, look at what color weight is, and how you can use it to evaluate your palette choices. We'll learn why those gorgeous palettes created by graphic designers may not be the best choices for your data visualizations, and present some strategies for choosing color palettes that keep your data presentation both unbiased and visually pleasing.\n\nThis is a tool-agnostic talk: you can apply these techniques with any data visualization package or tool which allows you to specify a color palette.",
        "thumbnail": "https://i.ytimg.com/vi_webp/M2bMpiztBxQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=M2bMpiztBxQ",
        "original_url": "https://www.youtube.com/watch?v=M2bMpiztBxQ"
    },
    {
        "index": 42,
        "title": "This Talk Has Been Disabled - Dawn Cooper",
        "url": "https://www.youtube.com/watch?v=JcwpExu6LWI",
        "video_id": "JcwpExu6LWI",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2731,
        "view_count": 211,
        "like_count": 4,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Depending on who you ask, 15-20% of the world's population has some form of disability. Despite this, the vast majority of software isn't fully accessible. Building truly accessible systems starts with asking questions. What does it mean to be disabled? How do we know whether people can use our website? And what if our users have access issues that we don't know about?\n\nMany of these core concepts are covered by the Web Content Accessibility Guidelines, which are the governing standard for web accessibility. However, some scenarios require us to dig a little deeper. We'll look at situations where you might need to think beyond the guidelines, and some of the resources and tools that you can use to help you do so.\n\nFinally, we'll learn how to meet a variety of different accessibility requirements by breaking down a series of real-world case studies. We'll take a magnifying glass to a household name's user interfaces, travel back in time to the GeoCities era, apply some concepts from government press conferences to online content delivery, hack a life-saving medical device, and attempt to navigate technical events (and stairs). By the end of the talk, you should understand why it's important to evaluate the accessibility of your software, what goes wrong when assessments don't happen, and how to apply these lessons to design systems that work for everyone.",
        "thumbnail": "https://i.ytimg.com/vi/JcwpExu6LWI/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=JcwpExu6LWI",
        "original_url": "https://www.youtube.com/watch?v=JcwpExu6LWI"
    },
    {
        "index": 43,
        "title": "Zoom, Enhance: Asyncio's New Introspection Powers - Pablo Galindo Salgado & Yury Selivanov",
        "url": "https://www.youtube.com/watch?v=RrsVi1P6n0w",
        "video_id": "RrsVi1P6n0w",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1489,
        "view_count": 543,
        "like_count": 34,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "asyncio in Python 3.14 introduces a new powerful feature: introspecting a running asyncio program from another OS process. This changes everything—now you can debug and profile your asyncio code in production with no performance penalty. Join us for a fun ride as we show how this magic works under the hood and how you can use it. Learn about technical design decisions, performance considerations, security implications, and trade-offs made. Along the way, you’ll gain both beautiful and horrible insights into how asyncio and operating systems interact, and we’ll wrap up with a flawless live demo!",
        "thumbnail": "https://i.ytimg.com/vi_webp/RrsVi1P6n0w/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=RrsVi1P6n0w",
        "original_url": "https://www.youtube.com/watch?v=RrsVi1P6n0w"
    },
    {
        "index": 44,
        "title": "What they don't tell you about building a JIT compiler for CPython - Brandt Bucher",
        "url": "https://www.youtube.com/watch?v=NE-Oq8I3X_w",
        "video_id": "NE-Oq8I3X_w",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1743,
        "view_count": 740,
        "like_count": 34,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Despite their reputation, just-in-time compilers are not magic “go faster” machines. Developing and maintaining any sort of optimizing compiler for even a single platform, let alone all of Python’s most popular supported platforms, is an incredibly complicated, expensive task.\n\nHowever, figuring out how to compile Python code down to machine code is just the beginning. Most talks and other resources about JITs offer an interesting introduction to the general approaches used, but gloss over the most interesting technical issues that need to be solved in order to actually \"ship\" these performance gains in practice.\n\nAs one of the engineers working on Microsoft's ambitious \"Faster CPython\" project, I'll introduce some of the challenges that we've encountered over the past year in our quest to make your code faster. Along the way, we'll learn how JITs decide what code to compile, how they compile this code in-process in a safe and secure way, and the debugging and profiling requirements that users have come to expect from native code.",
        "thumbnail": "https://i.ytimg.com/vi_webp/NE-Oq8I3X_w/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=NE-Oq8I3X_w",
        "original_url": "https://www.youtube.com/watch?v=NE-Oq8I3X_w"
    },
    {
        "index": 45,
        "title": "Iterando de forma eficiente en Python con Itertools - Andres Pineda",
        "url": "https://www.youtube.com/watch?v=Vy5JyKw_sGE",
        "video_id": "Vy5JyKw_sGE",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1942,
        "view_count": 56,
        "like_count": 0,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Python viene con muchas herramientas poderosas “incluidas de fábrica”, y entre ellas se encuentran sus estructuras de bucle. Pero usarlas correctamente no siempre es tan sencillo como parece. En esta charla exploraremos el módulo itertools, una colección de funciones diseñadas para que escribas bucles más inteligentes, no más complejos. A través de ejemplos prácticos y casos del mundo real, veremos cómo aprovechar itertools para escribir código más eficiente y expresivo. Al finalizar, tendrás a tu disposición un conjunto de herramientas que te ayudarán a dominar tus bucles en Python.",
        "thumbnail": "https://i.ytimg.com/vi_webp/Vy5JyKw_sGE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Vy5JyKw_sGE",
        "original_url": "https://www.youtube.com/watch?v=Vy5JyKw_sGE"
    },
    {
        "index": 46,
        "title": "\"GeoMonitoreo con Python: Soluciones Innovadoras para los Desafíos de Latinoamérica\"",
        "url": "https://www.youtube.com/watch?v=WyaXjwRMPWo",
        "video_id": "WyaXjwRMPWo",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2170,
        "view_count": 175,
        "like_count": 11,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Natalia V. Revollo and Carlos E. Berger\n\nEn esta charla, contaremos la experiencia de subirse al ‘tren Python’ que prometía ser una tecnología en expansión allá por el 2015, cuando comenzamos a utilizar este lenguaje para la implementación de soluciones basadas en procesamiento de imágenes de video y satelitales para aplicaciones científicas en casos reales. Desde ese entonces, junto con su ecosistema compuesto por bibliotecas en constante actualización, Python continúa revolucionando el monitoreo ambiental en Latinoamérica. Con aplicaciones como el análisis de imágenes satelitales para evaluar los cambios de uso y cobertura de suelo hasta la detección de aumento o disminución de humedales o la presencia de cianobacterias en lagos, ríos o embalses, esta herramienta ha permitido implementar soluciones accesibles y escalables frente a desafíos como el cambio climático, la gestión de recursos hídricos y la conservación de ecosistemas. Compartiremos casos de estudio exitosos y herramientas clave, mostrando cómo la comunidad puede contribuir al cuidado ambiental y la sostenibilidad ambiental en la región. Python es más que un lenguaje de programación, es una interacción continua entre documentación, desarrolladores y la comunidad que pone a disposición infinidad de herramientas para que cualquier persona con una idea para cuidar el planeta pueda generar su aporte y divulgarlo globalmente, algo que resultaba difícil de imaginar en nuestros comienzos.",
        "thumbnail": "https://i.ytimg.com/vi_webp/WyaXjwRMPWo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=WyaXjwRMPWo",
        "original_url": "https://www.youtube.com/watch?v=WyaXjwRMPWo"
    },
    {
        "index": 47,
        "title": "Automatizando el Rendimiento de Código Python - Kevin Rodriguez",
        "url": "https://www.youtube.com/watch?v=RsRj02ldeFU",
        "video_id": "RsRj02ldeFU",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1806,
        "view_count": 39,
        "like_count": 0,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Optimizar el código para mejorar el rendimiento requiere experiencia y un esfuerzo manual considerable. Debido a esta barrera, la mayoría del software permanece sin optimizar, lo que da lugar a las aplicaciones lentas que comúnmente experimentamos. En esta charla, veremos cómo las herramientas modernas impulsadas por IA pueden ahora optimizar continuamente el código Python de formas que antes estaban limitadas a programadores expertos.\n\nEn esta charla, exploraremos los pasos que los desarrolladores de aplicaciones siguen al optimizar su código y analizaremos cómo cada uno de estos pasos puede ser automatizado. En particular: • Cómo los Modelos de Lenguaje de Gran Escala pueden generar optimizaciones efectivas para el código. • Cómo el nuevo código generado se verifica exhaustivamente para garantizar que sea funcionalmente correcto. • Cómo automatizar las pruebas de rendimiento para asegurarse de que las optimizaciones realmente mejoren el rendimiento.\n\nA través de demostraciones en vivo de optimización de código con Codeflash, mostraremos las capacidades de este enfoque. Presentaremos varias categorías de optimizaciones posibles analizando código integrado en proyectos populares de código abierto, como Pydantic. Finalmente, veremos cómo podemos comenzar a optimizar automáticamente nuestro código Python existente y futuro con estas herramientas. Esto permite a los desarrolladores centrarse en escribir nuevas funcionalidades, mientras que los optimizadores impulsados por IA determinan la implementación más eficiente en Python.",
        "thumbnail": "https://i.ytimg.com/vi_webp/RsRj02ldeFU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=RsRj02ldeFU",
        "original_url": "https://www.youtube.com/watch?v=RsRj02ldeFU"
    },
    {
        "index": 48,
        "title": "Design Pressure: The Invisible Hand That Shapes Your Code - Hynek Schlawack",
        "url": "https://www.youtube.com/watch?v=IhNSINolcSM",
        "video_id": "IhNSINolcSM",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1902,
        "view_count": 3485,
        "like_count": 137,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Ever had this weird gut feeling that something is off in your code, but couldn't put the finger on why? Are you starting your projects with the best intentions, following all best practices, and still feel like your architecture turns weird eventually?\n\nMaybe, it's not your fault! Maybe, the tools or methodology you're using are applying design pressure that you're not cognizant of, but that influences the shape of your code.\n\nThe best way to prevent that is becoming aware of the forces at play. So, let's look at what design pressure is, look at the most prominent examples of good and bad, and explore how to leverage the former and quell the latter. Because you can only deal with something you know exists.",
        "thumbnail": "https://i.ytimg.com/vi_webp/IhNSINolcSM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=IhNSINolcSM",
        "original_url": "https://www.youtube.com/watch?v=IhNSINolcSM"
    },
    {
        "index": 49,
        "title": "Python: The Architect's Secret Weapon - Tadeh Hakopian",
        "url": "https://www.youtube.com/watch?v=OJLVLCpPZg0",
        "video_id": "OJLVLCpPZg0",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1655,
        "view_count": 339,
        "like_count": 7,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "The built environment is undergoing a digital revolution, and Python is at the forefront. This talk will explore how Python, combined with open-source tools like Blender, OpenUSD, and Dynamo, is transforming the way we design, analyze, and construct buildings.\n\nWe'll delve into practical applications, from generating 3D models to performing energy simulations and creating stunning visualizations. You'll learn how to harness the power of Python to address pressing challenges in the construction industry, such as climate change, resource scarcity, and urban development.\n\nSo if you're interested in how Python can shape the built environment then come and see for yourself!\n\nKey Takeaways:\n\n    - Understand the role of Python in the Architecture and Construction industry.\n    - Learn how professionals use Python to automate design and analysis tasks.\n    - Explore the potential of open-source tools like Blender, OpenUSD, and Dynamo.\n    - Discover how Python is used to create stunning visualizations and simulations of buildings.\n    - Gain insights into the future of digital design and construction.",
        "thumbnail": "https://i.ytimg.com/vi_webp/OJLVLCpPZg0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=OJLVLCpPZg0",
        "original_url": "https://www.youtube.com/watch?v=OJLVLCpPZg0"
    },
    {
        "index": 50,
        "title": "Who Tests the Testers? Making and Testing Pipelines - Evan Kohilas",
        "url": "https://www.youtube.com/watch?v=DhognqFaRow",
        "video_id": "DhognqFaRow",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1870,
        "view_count": 219,
        "like_count": 4,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "You likely have a good pipeline that either runs tests, lints, or deployments for your project.\n\nBut when it comes to changing that pipeline, how sure are you that it works before taking those changes live?\n\nIn this talk, we'll explore why it doesn't have to be the case that \"there's no devops for devops\".\n\nWe'll give a quick run down of what pipelines are, and why they should be used, before we give an example where it can be hard to know whether making changes to a pipeline will fail, and why that can be the case.\n\nThen, we'll showcase tools and methodologies that can be used for testing, creating, and simulating pipelines, so you too can setup a system to always be sure that your pipeline changes won't cause any water damage.",
        "thumbnail": "https://i.ytimg.com/vi_webp/DhognqFaRow/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=DhognqFaRow",
        "original_url": "https://www.youtube.com/watch?v=DhognqFaRow"
    },
    {
        "index": 51,
        "title": "Construyendo un Buscador Multimodal - Elizabeth Fuentes & Camila Hinojosa Añez",
        "url": "https://www.youtube.com/watch?v=09d6_hIzZIU",
        "video_id": "09d6_hIzZIU",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1319,
        "view_count": 35,
        "like_count": 0,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Full title: \"Construyendo un Buscador Multimodal: Combinando Texto e Imágenes para una Búsqueda Inteligente.\"\n\nEn el mundo actual basado en datos, procesar y analizar eficientemente grandes volúmenes de datos es crucial para muchas aplicaciones. Exploremos juntos cómo crear y administrar embeddings de texto e imágenes para búsqueda de similitudes en una base de datos PostgreSQL. Nos sumergiremos en un ejemplo práctico utilizando Python para demostrar cómo pueden crear buscadores que empleen lenguaje natural.",
        "thumbnail": "https://i.ytimg.com/vi_webp/09d6_hIzZIU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=09d6_hIzZIU",
        "original_url": "https://www.youtube.com/watch?v=09d6_hIzZIU"
    },
    {
        "index": 52,
        "title": "Descifrando emociones desde arte a memes - Maria Jose Molina Contreras",
        "url": "https://www.youtube.com/watch?v=-xNWHy6jtz0",
        "video_id": "-xNWHy6jtz0",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1896,
        "view_count": 32,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Full title: \"Descifrando emociones desde arte a memes: un sistema multimodal de imágenes y textos\"\n\nEl mundo que nos rodea está lleno de información de muchos tipos, y aunque muchas personas nos comunicamos de manera verbal para transmitir información muchas veces perdemos información del contexto o la intención si no va acompañado de imágenes. Lo mismo ocurre con los modelos cuando intentamos solucionar problemas muy complejos con modelos que solo pueden contener información de un tipo específico.\n\nPor ese motivo es necesario soluciones que puedan integrar diferentes tipos de datos, como imágenes, texto, video o audio: los modelos multimodales. Estos sistemas combinan múltiples entradas de tipos de datos y hacen los sistemas más robustos, ayudando en áreas de la salud, seguridad, criminología, comercial, etc.\n\nEl objetivo de esta charla es mostrar cómo crear un sistema que sea capaz de identificar emociones de diverso tipo de imágenes, y en paralelo extraer emociones de textos con ese resultado (con diferentes modelos) y asociar textos a las imágenes con los textos extraídos.\n\nEn esta charla, los asistentes aprenderán paso a paso cómo implementar un sistema multimodal que incluya imágenes y texto, con datos de libre acceso, y entender cómo los multimodales son una buena opción para solventar problemas complejos. Además, se compartirá el rol de Python del proceso, la aplicación de módulos externos para tener una implementación simple, para facilitar el realizar el proceso de multimodal.",
        "thumbnail": "https://i.ytimg.com/vi/-xNWHy6jtz0/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=-xNWHy6jtz0",
        "original_url": "https://www.youtube.com/watch?v=-xNWHy6jtz0"
    },
    {
        "index": 53,
        "title": "Un Enfoque Pythonico para Minería de Textos de Historias de Trabajo Arduo, Migración y Resiliencia",
        "url": "https://www.youtube.com/watch?v=JiS23xPAACc",
        "video_id": "JiS23xPAACc",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1734,
        "view_count": 34,
        "like_count": 0,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Rodrigo Silva Ferreira\n\nFull title: \"Honrando las Narrativas de Braceros: Un Enfoque Pythonico para Minería de Textos de Historias de Trabajo Arduo, Migración y Resiliencia\"\n\nEntre 1942 y 1964, el Programa Bracero llevó a más de 4.5 millones de trabajadores mexicanos a los Estados Unidos para hacer frente a la escasez de mano de obra. Sin embargo, las experiencias personales de estos trabajadores a menudo permanecen en la sombra, aunque sus relatos capturan historias de trabajo incansable, migración, discriminación y resiliencia. Honrar estas narrativas requiere no solo un reconocimiento histórico, sino también un método para descubrir y analizar sistemáticamente sus relatos matizados. Aprovechando la minería de texto y el procesamiento de lenguaje natural mediante bibliotecas de Python como beautiful soup, Sentence Transformers y BERTopic, esta charla tiene como objetivo destacar los temas, luchas y resiliencia que definen las experiencias de braceros.\n\nEsta sesión explorará cómo estas bibliotecas de Python pueden utilizarse para realizar un análisis sistemático de grandes cuerpos de texto, revelando temas recurrentes y el sentimiento en historias orales y entrevistas. Profundizaremos en técnicas basadas en código para el modelado de temas, la extracción de palabras clave y el análisis de sentimiento que dan vida a las historias de los Braceros. Al examinar cómo Python puede facilitar la comprensión del lenguaje del trabajo, la migración y las dificultades, esta charla demostrará cómo la ciencia de datos puede desempeñar un papel en la valoración de narrativas culturales e históricas. Al hacerlo, esta presentación también busca mostrar el potencial de Python para unir los campos de las humanidades digitales, la etnografía y la tecnología, allanando el camino hacia una mayor comprensión y reconocimiento de las voces subrepresentadas en la historia compartida de trabajo y migración entre México y Estados Unidos.",
        "thumbnail": "https://i.ytimg.com/vi_webp/JiS23xPAACc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=JiS23xPAACc",
        "original_url": "https://www.youtube.com/watch?v=JiS23xPAACc"
    },
    {
        "index": 54,
        "title": "Pruebas E2E automatizadas con Playwright y Python - Joan Alejandro Esquivel Montero",
        "url": "https://www.youtube.com/watch?v=G7SzmAO_JbA",
        "video_id": "G7SzmAO_JbA",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1535,
        "view_count": 45,
        "like_count": 3,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "En un mundo donde necesitamos garantizar la calidad de nuestro producto, automatizar pruebas para poder seguir flujos de trabajo en ambientes ágiles es fundamental.\n\nEn esta charla de 30 minutos, te invito a conocer el universo de Playwright combinado con el poder de Python, la cual es una herramienta con mucha proyección en el mercado.\n\nComenzaremos explorando los fundamentos de Playwright, desvelando por qué lo hace tan único, cómo podemos instalarlo y automatizar de manera sencilla un caso de prueba de la mano con PyTest.\n\nExploraremos juntos las opciones que nos da Playwright para la posibilidad de ejecutar nuestras pruebas en múltiples navegadores, tomar capturas de pantalla, video y emular vistas móviles para probar diseños responsivos.\n\nPero no terminaremos ahí, exploraremos cómo potenciar tus scripts de prueba con el patrón de diseño \"Page Object Model\", una práctica que mejora la mantenibilidad del código y facilita la colaboración en los equipos de desarrollo. Además, cómo podemos consumir información por medio de los \"fixtures\" facilitados por PyTest.\n\nYa seas un ingeniero de QA o un desarrollador buscando mejorar la calidad de tus proyectos, esta charla te proporcionará herramientas prácticas y conocimientos esenciales para agregar pruebas E2E eficientes en tu flujo de desarrollo.",
        "thumbnail": "https://i.ytimg.com/vi_webp/G7SzmAO_JbA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=G7SzmAO_JbA",
        "original_url": "https://www.youtube.com/watch?v=G7SzmAO_JbA"
    },
    {
        "index": 55,
        "title": "Reinventing the Wheel: A Community-Driven Roadmap for Python Packaging",
        "url": "https://www.youtube.com/watch?v=1Oki8vAWb1Q",
        "video_id": "1Oki8vAWb1Q",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1890,
        "view_count": 247,
        "like_count": 7,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "By Jonathan Dekhtiar and Barry Warsaw\n\nAbstract\n\nThe Python ecosystem thrives on innovation, adaptability, versatility and a thriving open-source community. Python’s reach continues to evolve, fueled today by custom silicon, variations within CPU architecture families, AI accelerators, and diverse use cases. The Wheel format and packaging tools should adapt and evolve to better support the Python community.\n\nWe’ll review the most potent challenges in the Python packaging ecosystem, and present our roadmap for adapting the Wheel format to enable native support for specialized hardware, the use of non-default Python package indexes, and managing diverse compute backends, all while maintaining the accessibility and simplicity Python is known for.We'll issue a call to action from the open source community, supported by important libraries such as PyTorch, JAX, Scikit-learn, etc. This is a unified roadmap for the future of Python packaging, and present published and draft PEPs.\nDescription\n\nManaging software stacks in complex compute environments is difficult. Often the standard wheel tags aren’t sufficient to describe your exact compute environment. These are common problems for many users, are often difficult to remedy, and even more difficult to make reproducible, easy to use, and composable.\n\nWe propose to “Re-Invent the Wheel” and have founded the “Wheel Next” interest group as an open source collaboration among different users, companies, packages, and maintainers that are working together on solutions to these difficult problems. We are actively publishing PEPs that extend the Wheel format, metadata, packaging tooling, and PyPI standards, and contribute to projects that help with various aspects of the problem space, including installers and indexes.\n\nIn addition, we’ll give a call to action for everyone interested in joining the initiative and helping us evolve and build the packaging ecosystem the Python world needs today and in the future.",
        "thumbnail": "https://i.ytimg.com/vi_webp/1Oki8vAWb1Q/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=1Oki8vAWb1Q",
        "original_url": "https://www.youtube.com/watch?v=1Oki8vAWb1Q"
    },
    {
        "index": 56,
        "title": "How to learn Japanese with Python - Takanori Suzuki",
        "url": "https://www.youtube.com/watch?v=3wQxP-GfT-A",
        "video_id": "3wQxP-GfT-A",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1732,
        "view_count": 538,
        "like_count": 24,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Japanese is reportedly one of the most difficult languages for English speakers to learn. (FSI language difficulty: https://www.fsi-language-courses.org/blog/fsi-language-difficulty/) There are many reasons for this, including the fact that there are three types of characters: hiragana, katakana, and kanji, and that words are not separated by spaces. In this talk, I will first introduce what makes Japanese different from many European languages. Then I will show how Python and natural language processing libraries can be used to support Japanese language learning.",
        "thumbnail": "https://i.ytimg.com/vi/3wQxP-GfT-A/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=3wQxP-GfT-A",
        "original_url": "https://www.youtube.com/watch?v=3wQxP-GfT-A"
    },
    {
        "index": 57,
        "title": "Diving into the Deep End: A Python Journey in Water Management - Jack Linke",
        "url": "https://www.youtube.com/watch?v=-rpVW5lntpM",
        "video_id": "-rpVW5lntpM",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1692,
        "view_count": 113,
        "like_count": 5,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Six years ago, I was asked to create a better Excel spreadsheet to track water requests for a small irrigation district. That request sparked an unexpected journey: from knowing only basic Python syntax to building a SaaS platform that models physical water delivery systems. This platform now handles water accounting, delivery tracking, scheduling, reporting, and even simulation for real-world use.\n\nIn this talk, I’ll share how I tackled challenges like: - Transitioning from spreadsheets to a Python-powered solution. - Modeling physical systems without a background in discrete mathematics, graph theory, or simulation. - Scaling a personal learning project into a production-ready SaaS application.\n\nI’ll also explore the tools and techniques that made it possible, the lessons I learned along the way, and the moments of failure and success that shaped my journey. Whether new to Python, considering tackling a big project, or just curious about real-world applications of Python, this talk will inspire attendees to dive in and solve problems beyond their comfort zone.",
        "thumbnail": "https://i.ytimg.com/vi_webp/-rpVW5lntpM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=-rpVW5lntpM",
        "original_url": "https://www.youtube.com/watch?v=-rpVW5lntpM"
    },
    {
        "index": 58,
        "title": "Marimo: A Notebook that \"Compiles\" Python for Reproducibility and Reusability - Akshay Agrawal",
        "url": "https://www.youtube.com/watch?v=3-3zy5W2SOw",
        "video_id": "3-3zy5W2SOw",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2847,
        "view_count": 425,
        "like_count": 19,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "This talk explores the following question: What would it take to create a new kind of Python notebook that, unlike a REPL, knew the order in which to run cells? What if the notebook could also update automatically or lazily when a variable was updated? And what if we could add UI elements, like sliders and dropdowns, to all this? Would this change how you worked with notebooks?\n\nBut most of all: how would you build such a thing? In this talk, we propose that you would need a kind of \"compiler\" on top of Python.\n\nThis talk focuses on how to create such a notebook by using marimo — an open-source reactive notebook for Python that's executable as scripts and shareable as apps — as a case study. Marimo's key technology is static analysis: marimo \"compiles\" blocks of Python code, or \"cells\", to a directed acyclic graph. This graph models how data flows across cells, and is used as an intermediate representation consumed by a runtime that eliminates hidden state while also powering interactive computing, scripts, and web apps.\n\nBy using notebooks and marimo's internals as a case study, we'll examine a question that is broadly applicable to developer tools in many domains: What does it take to compile Python code to a flexible intermediate representation that preserves the original program's semantics? We'll discuss design decisions and tradeoffs along the way, such as the pros and cons of static analysis versus runtime tracing.",
        "thumbnail": "https://i.ytimg.com/vi_webp/3-3zy5W2SOw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=3-3zy5W2SOw",
        "original_url": "https://www.youtube.com/watch?v=3-3zy5W2SOw"
    },
    {
        "index": 59,
        "title": "Processing Large Geospatial Datasets with Dask & Xarray - Patrick Hoefler",
        "url": "https://www.youtube.com/watch?v=2ZToLEa9lW8",
        "video_id": "2ZToLEa9lW8",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1707,
        "view_count": 176,
        "like_count": 4,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Geospatial datasets are growing in size, often exceeding 100TB and reaching into Petabyte scale. Many of these datasets are publicly available, providing a great resource for analysis, but working with them requires increasingly large computational resources and a diverse set of tools.\n\nWe will start by briefly introducing Dask and Xarray, which form the backbone of the geospatial stack in Python. Using the ERA5 dataset as a case study, we will demonstrate how Xarray can be used to explore large-scale climate data effectively from your local laptop.\n\nBuilding on this foundation, we will delve into recent advancements in Dask Array. Originally designed as a parallel NumPy API, Dask Array was used to handle much larger datasets over the last few years. We’ll explore the latest developments in Dask and Xarray that continue to expand the scalability and capabilities of these tools to catch up with the scale requirements of modern datasets.\n\nThis discussion will highlight improvements in ease of use, scalability, and performance. Additionally, we’ll present the first-ever set of geospatial benchmarks, collected earlier in 2024 from the community. These benchmarks provide a clear illustration of the scale at which Xarray and Dask are required to operate.\n\nFinally, we’ll offer a peak behind the scenes of an ongoing project aimed at building the first ever query optimizer for large scale array computations.",
        "thumbnail": "https://i.ytimg.com/vi_webp/2ZToLEa9lW8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=2ZToLEa9lW8",
        "original_url": "https://www.youtube.com/watch?v=2ZToLEa9lW8"
    },
    {
        "index": 60,
        "title": "Usando Python y Gemini para visualizar alertas sanitarias en una web accesible- Lía Da Silva - Rojas",
        "url": "https://www.youtube.com/watch?v=0dJmYjiMUw8",
        "video_id": "0dJmYjiMUw8",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1205,
        "view_count": 48,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "En esta charla se expondrá cómo se usa Flask y Gemini para obtener información de interés desde distintos sitios web no estructurados. Adicionalmente, se discutirán atajos para web-scraping con Python, en un formato legible para Gemini. Esta sesión está dirigida a personas interesadas en IA y con conocimiento básico de Python, así como para profesionales curiosos, en busca de nuevas aplicaciones de IA. La motivación de este proyecto surge pues en Chile las alertas sanitarias en medicamentos, especialmente en anticonceptivos, han sido un problema grave que impacta con más énfasis a mujeres y sus derechos reproductivos. Por ejemplo, alrededor de 200 mujeres fueron afectadas sólo en el primer fallo documentado de anticonceptivos en el segundo semestre de 2020. La solución del gobierno de la época fue indemnizar a las afectadas que demandaron, con 80.000 pesos Chilenos, (80 USD app). Desafortunadamente no fue el único caso, de hecho la última alerta informada de anticonceptivos defectuosos data de septiembre de 2024. En esta charla se presentará una web app para resolver el problema del acceso a la información sobre las alertas sanitarias de medicamentos defectuosos en Chile, usando IA generativa y frameworks web.",
        "thumbnail": "https://i.ytimg.com/vi/0dJmYjiMUw8/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=0dJmYjiMUw8",
        "original_url": "https://www.youtube.com/watch?v=0dJmYjiMUw8"
    },
    {
        "index": 61,
        "title": "GPU Programming in Pure Python - Bryce Adelstein Lelbach",
        "url": "https://www.youtube.com/watch?v=8utSRblGEB0",
        "video_id": "8utSRblGEB0",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2902,
        "view_count": 741,
        "like_count": 26,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "GPU programming can be scary but doesn’t need to be. With the CUDA Core Libraries and CUDA Python object model, you have a friendly interface to get you started with GPU acceleration.\n\nIn this example-driven talk, we'll begin with a general discussion of the CUDA model and how to manage accelerator devices in Python with cuda.core. Next, we'll teach you how to launch work and manage memory. Then, you'll learn how to use parallel algorithms with cuda.parallel, write your own kernels that leverage cooperative algorithms with cuda.cooperative, and integrate seamlessly with accelerated libraries such as cuDNN and cuBLAS.\n\nWe'll look at a variety of parallel examples, from counting words, to implementing softmax, to a full blown machine learning demo.\n\nBy the time the talk is over, you'll be ready to start accelerating your Python code with GPUs!",
        "thumbnail": "https://i.ytimg.com/vi_webp/8utSRblGEB0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=8utSRblGEB0",
        "original_url": "https://www.youtube.com/watch?v=8utSRblGEB0"
    },
    {
        "index": 62,
        "title": "Scaling the Mountain: A Framework for Tackling Large-Scale Tech Debt - Jimmy Lai",
        "url": "https://www.youtube.com/watch?v=0mZ0AkLimDg",
        "video_id": "0mZ0AkLimDg",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 2057,
        "view_count": 275,
        "like_count": 6,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Managing tech debt in large legacy codebases isn’t just a challenge—it’s an ongoing battle that can drain developer productivity and morale. In this talk, I’ll introduce a Python-powered Tech Debt Framework bar-raiser designed to help teams tackle even the most daunting tech debt problems with 100,000+ violations. This open-source framework empowers developers and engineering leaders by: - Tracking Progress: Measure and visualize the state of tech debt and trends over time. - Recognizing Contributions: Celebrate developer efforts and foster accountability with contribution leaderboards and automated shoutouts. - Automating Fixes: Save countless hours with codemods that address repetitive debt patterns, allowing developers to focus on higher-priority work.\n\nThrough real-world case studies, I’ll showcase how we: - Reduced 70,000+ pyright-ignore annotations to boost type-checking coverage from 60% to 99.5%. - Converted a monolithic sync codebase to async, addressing blocking IO issues and adopting asyncio effectively.\n\nAttendees will gain actionable strategies for scaling Python automation, fostering team buy-in, and systematically reducing tech debt across massive codebases. Whether you’re dealing with type errors, legacy dependencies, or async transitions, this talk provides a roadmap for creating cleaner, more maintainable code at scale.",
        "thumbnail": "https://i.ytimg.com/vi_webp/0mZ0AkLimDg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=0mZ0AkLimDg",
        "original_url": "https://www.youtube.com/watch?v=0mZ0AkLimDg"
    },
    {
        "index": 63,
        "title": "Painting with Python - Caleb Madrigal",
        "url": "https://www.youtube.com/watch?v=ALDl_c2JlAE",
        "video_id": "ALDl_c2JlAE",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250522",
        "duration": 1836,
        "view_count": 237,
        "like_count": 5,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "In this talk, we'll cover the basics of making visual algorithmic art with Python using only basic dependencies (like Python Image Library / Pillow). No GPU acceleration. No AI. Just simple vanilla Python code. Come learn the basics from a hacker-turned-artist who repurposed math he learned doing IoT radio hacking to do visual art.",
        "thumbnail": "https://i.ytimg.com/vi_webp/ALDl_c2JlAE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ALDl_c2JlAE",
        "original_url": "https://www.youtube.com/watch?v=ALDl_c2JlAE"
    },
    {
        "index": 64,
        "title": "Building AI Applications the Pydantic Way (Sponsor: Pydantic)",
        "url": "https://www.youtube.com/watch?v=zJm5ou6tSxk",
        "video_id": "zJm5ou6tSxk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3857,
        "view_count": 1648,
        "like_count": 41,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Samuel Colvin\n\nAI is becoming an increasingly common part of software development, but best practices for building and maintaining AI-powered applications are still evolving. Many developers are experimenting with LLMs, but figuring out how to structure AI applications effectively—let alone debug and monitor them—can be a challenge. The good news? AI development is just software development—with a few unique twists. You don't need to reinvent engineering principles to work with LLMs, but you do need the right design patterns and development tools to build reliable AI applications efficiently. In this talk, we'll share an opinionated blueprint for AI development in Python, covering both PydanticAI, an open-source AI agent framework, and Pydantic Logfire, an observability platform that helps you understand and debug your AI applications. You'll learn practical techniques for structuring LLM-powered systems, tracking and evaluating model behavior, and integrating AI features into larger software projects—using familiar tools and proven patterns. Whether you're already building AI applications or just curious about how best to approach them, this session will give you a clear, pragmatic foundation for writing AI-powered software in Python.",
        "thumbnail": "https://i.ytimg.com/vi_webp/zJm5ou6tSxk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=zJm5ou6tSxk",
        "original_url": "https://www.youtube.com/watch?v=zJm5ou6tSxk"
    },
    {
        "index": 65,
        "title": "High-Performance Python: Faster Type Checking and Free Threaded Execution (Sponsor: Meta)",
        "url": "https://www.youtube.com/watch?v=ZTSZ1OCUaeQ",
        "video_id": "ZTSZ1OCUaeQ",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3925,
        "view_count": 1978,
        "like_count": 52,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Sam Gross and Neil Mitchell\n\nMeta's Commitment to the Python Community: Empowering Innovation and Collaboration\n\nAt Meta, we're dedicated to advancing the Python ecosystem through open-source contributions and community engagement. Our mission is to improve the tooling and runtime, making the language more efficient, scalable, and accessible for developers worldwide.\n\nIntroducing Pyrefly: A Scalable Type Checker for a Unified IDE Experience\n\nWe're excited to introduce Pyrefly, a new type checker designed with scalability in mind. Built from the ground up using Rust, Pyrefly provides a faster and more efficient type checking experience, enabling developers to write better code with confidence. With Pyrefly, we aim to deliver a unified IDE experience power type hints and code navigation on a new type checking engine.\n\nUnlocking Better Performance with Free-Threaded Python\n\nIn collaboration with the Python community, we've been working on making free-threaded Python (No-GIL) available in Python 3.13. This significant milestone allows developers to take full advantage of modern multi-core processors directly from Python. More recently, our efforts have focused on improving the single-threaded performance of the free threading build, ensuring that Python remains a top choice for developers seeking high-performance capabilities.",
        "thumbnail": "https://i.ytimg.com/vi/ZTSZ1OCUaeQ/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ZTSZ1OCUaeQ",
        "original_url": "https://www.youtube.com/watch?v=ZTSZ1OCUaeQ"
    },
    {
        "index": 66,
        "title": "Evolving Django: What We Learned by Integrating MongoDB (Sponsor: MongoDB)",
        "url": "https://www.youtube.com/watch?v=AfmfJhgSlnk",
        "video_id": "AfmfJhgSlnk",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 2872,
        "view_count": 256,
        "like_count": 9,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Anaiya Raisinghani\n\nAt MongoDB, we have several Django enthusiasts who have jumped at the idea of backing a long-term solution to combining MongoDB and Django. Having historically provided support for SQL-based open source frameworks like Entity Framework in .NET/C#, Doctrine in PHP, and many more, we are familiar with the territory. We're happy to say we've successfully created a MongoDB Backend Library for Django and want to share all that we've learned kitting out a new NoSQL backend for a traditionally SQL framework including how we believe we have influenced -- and will continue to influence -- changes in the core Django library.",
        "thumbnail": "https://i.ytimg.com/vi/AfmfJhgSlnk/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=AfmfJhgSlnk",
        "original_url": "https://www.youtube.com/watch?v=AfmfJhgSlnk"
    },
    {
        "index": 67,
        "title": "Accelerated Python: The Community and Ecosystem (Sponsor: NVIDIA)",
        "url": "https://www.youtube.com/watch?v=6IcvKPfNXUw",
        "video_id": "6IcvKPfNXUw",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3314,
        "view_count": 498,
        "like_count": 10,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Jeremy Tanner\n\nPython is everywhere. Simulation, data science, and Gen AI all depend on it. Unfortunately, the dizzying array of tools leaves a newcomer baffled at where to start. We'll take you on a guided tour of the vibrant community and ecosystem surrounding accelerated Python programming. Explore a variety of tools, libraries, and frameworks that enable efficient computation and performance optimization in Python, including CUDA Python, RAPIDS, Warp, and Legate. We'll also discuss integration points with PyData, PyTorch, and JAX communities. Learn about collaborative efforts within the community, including open source projects and contributions that drive innovation in accelerated computing. We'll discuss best practices for leveraging these frameworks to enhance productivity in developing AI-driven applications and conducting large-scale data analyses.",
        "thumbnail": "https://i.ytimg.com/vi_webp/6IcvKPfNXUw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=6IcvKPfNXUw",
        "original_url": "https://www.youtube.com/watch?v=6IcvKPfNXUw"
    },
    {
        "index": 68,
        "title": "🐍 Python meets the crab 🦀 - Friendship at first sight? (Sponsor: Bloomberg)",
        "url": "https://www.youtube.com/watch?v=CqOZdTFb4io",
        "video_id": "CqOZdTFb4io",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 4018,
        "view_count": 982,
        "like_count": 28,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Bernát Gábor\n\nPython's simplicity often comes at the cost of performance, especially in computationally-intensive tasks. In contrast, Rust enables one to write low-level code that takes full advantage of the underlying hardware. Furthermore, Rust (just like Python) has a vibrant ecosystem with many great libraries. PyO3 (together with the maturin build back-end) allows you to easily integrate the two languages together and make use of the best of both.",
        "thumbnail": "https://i.ytimg.com/vi_webp/CqOZdTFb4io/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=CqOZdTFb4io",
        "original_url": "https://www.youtube.com/watch?v=CqOZdTFb4io"
    },
    {
        "index": 69,
        "title": "Enterprise-Ready Python for High-Performance Data Teams (Sponsor: Snowflake)",
        "url": "https://www.youtube.com/watch?v=o2JUXACkv4k",
        "video_id": "o2JUXACkv4k",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3203,
        "view_count": 400,
        "like_count": 9,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Savannah Ostrowski and Doris Lee\n\nIn this talk, we’ll explore the challenges of running Python in enterprise data teams and share lessons learned from building for PyData developers at Snowflake, with an emphasis on flexibility, performance, and library compatibility. We'll focus on two key aspects: APIs and runtimes. First, we'll look at how you can run pandas at all data scales using Modin, and how this interoperates with other tools in the PyData stack. Then, we'll discuss ways to manage runtime compatibility, from customizing environments to working within notebook-based workflows.",
        "thumbnail": "https://i.ytimg.com/vi/o2JUXACkv4k/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=o2JUXACkv4k",
        "original_url": "https://www.youtube.com/watch?v=o2JUXACkv4k"
    },
    {
        "index": 70,
        "title": "Real-World Problems Blockchain Actually Solves (and How to Code Them in Python) (Sponsor: Algorand)",
        "url": "https://www.youtube.com/watch?v=k5ITsaUGRj4",
        "video_id": "k5ITsaUGRj4",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3754,
        "view_count": 357,
        "like_count": 16,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Gabriel Kuettel\n\nIn this talk, we'll zero in on real-world problems blockchain genuinely solves. We'll cut through the jargon and focus on when blockchain makes sense and when it doesn't.\n\nEverything we build will use Python, using libraries and patterns you already know, plus a few lightweight tools to interact with the Algorand blockchain.\n\nWe'll work through hands-on examples: coding trust into peer-to-peer payment systems for underbanked regions, building fractional ownership for previously illiquid assets, and creating self-sovereign digital identity systems that empower users with ownership of their credentials. These aren't hypotheticals—companies are running these solutions in production today, and we'll break down how they do it.\n\nExpect a session that meets you where you are: practical, approachable, and 100% Python. By the end, you'll see where blockchain fits into your toolkit—not as a magic bullet, but as a practical option for specific, thorny problems.",
        "thumbnail": "https://i.ytimg.com/vi_webp/k5ITsaUGRj4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=k5ITsaUGRj4",
        "original_url": "https://www.youtube.com/watch?v=k5ITsaUGRj4"
    },
    {
        "index": 71,
        "title": "DataComPy - Dataframe Comparisons made Explicit (Sponsor: Capital One)",
        "url": "https://www.youtube.com/watch?v=jxKNY4d4SMQ",
        "video_id": "jxKNY4d4SMQ",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 2009,
        "view_count": 291,
        "like_count": 4,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Akshay Gupta and Raymond Haffar\n\nDataComPy is a widely used validation tool with over 1.1 million monthly installations, written to quickly and comprehensively compare a pair of dataframes. Designed to help make differences between schemas and data clear and explicit, DataComPy generates a comprehensive report at the completion of all comparisons, providing useful metrics such as match percentages, maximal differences, and sample mismatches between comparable columns. In addition, it supports various forms of input data types for both native (Pandas, Polars, Spark, Snowpark) and indirect (Dask, Ray) comparisons. It also supports comparison of certain types of database tables, including Snowflake and DuckDB. Over the course of the presentation, we'll be delving further into how DataComPy works, what features it provides, and what types of practical use cases it is designed to help address.",
        "thumbnail": "https://i.ytimg.com/vi_webp/jxKNY4d4SMQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=jxKNY4d4SMQ",
        "original_url": "https://www.youtube.com/watch?v=jxKNY4d4SMQ"
    },
    {
        "index": 72,
        "title": "Reviewing another year of security partnership between the PSF & Alpha-Omega (Sponsor: Alpha-Omega)",
        "url": "https://www.youtube.com/watch?v=ZbHzU72r3mY",
        "video_id": "ZbHzU72r3mY",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3273,
        "view_count": 112,
        "like_count": 3,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Seth Michael Larson, Michael Winser and Mike Fiedler\n\nAlpha-Omega's mission is to protect society by catalyzing sustainable security improvements to the most critical open source software projects and ecosystems. Funded by Amazon AWS, Google, Microsoft, and Citi, Alpha-Omega has partnered with the Python Software Foundation to support two critical security-focused roles for the Python Ecosystem. Last year's talk with Seth Larson and Michael Winser was the origin story of this effort and showed the road ahead. This year's talk will be at least 50% more interesting and entertaining because we're adding Mike Fiedler. Together we have a lot to talk about.\n\nMichael Winser is the co-founder of Alpha-Omega. Seth Larson is the Python Security Developer in Residence and Mike Fiedler is the PyPI Safety and Security Engineer.",
        "thumbnail": "https://i.ytimg.com/vi_webp/ZbHzU72r3mY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ZbHzU72r3mY",
        "original_url": "https://www.youtube.com/watch?v=ZbHzU72r3mY"
    },
    {
        "index": 73,
        "title": "Building Scalable AI Tool Servers with Model Context Protocol (MCP) and Heroku (Sponsor: Heroku)",
        "url": "https://www.youtube.com/watch?v=01I4ywanRDc",
        "video_id": "01I4ywanRDc",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 2872,
        "view_count": 375,
        "like_count": 5,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Hillary Sanders and Ken Alger\n\nLarge Language Models (LLMs) become vastly more powerful when given the ability to call external tools to gather information and take real-world actions - such as querying APIs, modifying databases, or kicking off workflows. This talk explores how to build and scale these tool servers using Python and the Model Context Protocol (MCP).\n\nMCP is an open-source protocol that provides a standardized request format and response structure for LLMs interacting with external tools, ensuring consistency while allowing flexible execution under the hood. We’ll walk through implementing an MCP-compliant tool server in Python, covering topics like transport types, the connection lifecycle, and best practices.\n\nLLM tool servers must handle increasing traffic efficiently, requiring strategies for load balancing, container orchestration, and cloud deployment. We’ll discuss scaling Python services horizontally using load balancing and container orchestration. This includes practical considerations for deploying on 12-Factor App platforms like Heroku.\n\nThrough live coding, we’ll implement, deploy, and scale an MCP-compliant tool server using Python. We’ll also demonstrate how an LLM can interact with MCP tool servers, enabling you to build powerful, API-driven AI agents.\n\nAttendees will gain hands-on knowledge of building, deploying, and scaling Python-based MCP tool servers and AI agents, made simple with Heroku’s streamlined deployment process.",
        "thumbnail": "https://i.ytimg.com/vi/01I4ywanRDc/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=01I4ywanRDc",
        "original_url": "https://www.youtube.com/watch?v=01I4ywanRDc"
    },
    {
        "index": 74,
        "title": "Build modern Python apps on Azure (Sponsor: Microsoft)",
        "url": "https://www.youtube.com/watch?v=k6Vm2hakkV4",
        "video_id": "k6Vm2hakkV4",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250520",
        "duration": 3978,
        "view_count": 848,
        "like_count": 22,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Presented by: Pamela Fox and Rohit Ganguly\n\nFor software engineers today, developing Python apps and getting them to the cloud can be a serious hassle. Join us to explore a streamlined end-to-end experience of developing cloud-ready Python applications with Microsoft technologies!\n\nWe'll cover how to build and deploy applications to Azure that use modern async frameworks, generative AI, and open-source databases like PostgreSQL.\n\nBy the end, you'll learn how save time and supercharge your development workflows with fan-favorite Python developer tools like VS Code, our Python extension, and GitHub Copilot - all without leaving your IDE!",
        "thumbnail": "https://i.ytimg.com/vi/k6Vm2hakkV4/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=k6Vm2hakkV4",
        "original_url": "https://www.youtube.com/watch?v=k6Vm2hakkV4"
    },
    {
        "index": 75,
        "title": "PyCon US 2025 Tutorial Sneak Peek: \"Decorators Demystified\" - Trey Hunner",
        "url": "https://www.youtube.com/watch?v=jxlK6kKg114",
        "video_id": "jxlK6kKg114",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250506",
        "duration": 46,
        "view_count": 940,
        "like_count": 6,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "You know that the @ symbol applies a decorator to a function, but what does that really mean? And how can you make your own decorators?\n\nThat's what Trey Hunner's PyCon US 2025 tutorial is all about. \n\nJoining us at PyCon US 2025? Register your spot for this tutorial today via the us.pycon.org/2025/ website! More information about PyCon US 2025 tutorials and the full schedule here: https://us.pycon.org/2025/schedule/tutorials/",
        "thumbnail": "https://i.ytimg.com/vi/jxlK6kKg114/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=jxlK6kKg114",
        "original_url": "https://www.youtube.com/watch?v=jxlK6kKg114"
    },
    {
        "index": 76,
        "title": "PyCon US 2025 Tutorial Sneak Peek: \"\"Building a cross-platform app with BeeWare\"-Russell Keith-Magee",
        "url": "https://www.youtube.com/watch?v=9QmU2m3ClDI",
        "video_id": "9QmU2m3ClDI",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250506",
        "duration": 38,
        "view_count": 616,
        "like_count": 12,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "All code needs a user interface. That might be an API, or a web page - but these days, many users will expect an app that they can install on their laptop, or on their phone. But how do you build a native application in Python? And do you need to build a different version of your app for every device and operating system you want to support?\n\nIn this hands-on tutorial, you'll learn how you can use the BeeWare suite of tools to build a graphical user interface for your code, and deploy that code as a desktop app, and as a mobile app - all from a single Python codebase. You'll learn how to integrate third-party libraries like NumPy into your app, and how to customize the appearance of your packaged app. You'll also learn how you can access device hardware (such as cameras and GPS) in your app's code.\n\nNo experience with mobile or desktop app development is required; a basic familiarity with Python is all you need. By the end of the tutorial, you'll have an app running on your own phone, written entirely by you, using nothing but Python.\n\nJoining us at PyCon US 2025? Register your spot for this tutorial today via the us.pycon.org/2025/ website! More information about PyCon US 2025 tutorials and the full schedule here: https://us.pycon.org/2025/schedule/tutorials/",
        "thumbnail": "https://i.ytimg.com/vi/9QmU2m3ClDI/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=9QmU2m3ClDI",
        "original_url": "https://www.youtube.com/watch?v=9QmU2m3ClDI"
    },
    {
        "index": 77,
        "title": "PyCon US 2025 Tutorial Sneak Peek: \"Build a Synthesizer with Python\" - Sangarshanan",
        "url": "https://www.youtube.com/watch?v=vw4djhArb1Y",
        "video_id": "vw4djhArb1Y",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250505",
        "duration": 195,
        "view_count": 500,
        "like_count": 14,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "In this tutorial, we'll discuss how to build the basic components that make up a modern digital synth from scratch! In the process, learn some DSP and audio programming concepts! By the end, you’ll be able to make your own tunes with Python! We will start with theory, then work through Jupyter notebooks both individually and as a group.\n\nThis tutorial will be a lot of fun if you’re a musically inclined Python programmer. As someone interested in music, you will discover the components that make up a synthesizer by literally building & making music with it, and as someone interested in Python, you’ll learn a lot about audio programming and signal processing techniques.\n\nJoining us at PyCon US 2025? Register your spot for this tutorial today via the us.pycon.org/2025/ website! More information about PyCon US 2025 tutorials and the full schedule here: https://us.pycon.org/2025/schedule/tutorials/",
        "thumbnail": "https://i.ytimg.com/vi/vw4djhArb1Y/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=vw4djhArb1Y",
        "original_url": "https://www.youtube.com/watch?v=vw4djhArb1Y"
    },
    {
        "index": 78,
        "title": "PyCon US 2025 Tutorial Sneak Peek: \"Reimplement `itertools` for fun & profit\" Rodrigo Girão Serrão",
        "url": "https://www.youtube.com/watch?v=xumSsPlhB2o",
        "video_id": "xumSsPlhB2o",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250502",
        "duration": 202,
        "view_count": 489,
        "like_count": 14,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Full Tutorial Title: Reimplementing the module `itertools` for fun and profit\n\nYou know how to use a `for` loop in Python. But do you know HOW it works Do you know why it is that you can write `for` loops with `range`, `lists`, `strings`, `zip`, and `enumerate`? What's the machinery that makes that work?\n\nAnd have you noticed how `range(1)` and `range(99999999999999999)` take exactly the same time to run? There's something lazy about the built-in `range`...\n\nBut what does “lazy” even mean?\n\nIn the tutorial “Reimplementing the module `itertools` for fun and profit” you'll learn how to answer all of these questions, and much more, through the lens of the module `itertools`.\n\nThe module `itertools` is implemented in C, but in this tutorial you'll reimplement it in pure Python! And you'll do that for two reasons.\n\nFirst, because it's an excellent, fun challenge...And on top of that, because it's surprisingly instructive.\n\nBy trying to reimplement the 19 iterators in the module `itertools`, you'll learn what the word “iterable” really means. And you'll learn what “iterator” means, a word that is uncomfortably similar to “iterable”.\n\nYou will also understand what the built-ins `next` and `iter` have to do with all of this! And you'll uncover Python's darkest secret: that you could translate all of your `for` loops into `while` loops. I promise those will be some 7 or 8 funky lines of code!\n\nThe structure of the workshop will be very simple: I will show some concepts and some demos, then I will let you work on some exercises. As you work through exercises, you'll have automated tests to help you check your progress. And we'll do this back and forth a couple of times, for the duration of the tutorial.\n\nSo, if you want to learn more about the intricacies of iteration in Python, if you want to learn more about the module `itertools` – which is a module you should really master either way —, and if you want to have some fun while doing all of this, join me so we can reimplement the module `itertools` together!\n\nReferences:\n - Automated tests: https://github.com/mathspp/the-little-book-of-itertools\n - Overview of the module `itertools`: https://mathspp.com/blog/module-itertools-overview\n - Module `itertools` documentation: https://docs.python.org/3/library/itertools.html\n\nJoining us at PyCon US 2025? Register your spot for this tutorial today via the us.pycon.org/2025/ website! More information about PyCon US 2025 tutorials and the full schedule here: https://us.pycon.org/2025/schedule/tutorials/",
        "thumbnail": "https://i.ytimg.com/vi/xumSsPlhB2o/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xumSsPlhB2o",
        "original_url": "https://www.youtube.com/watch?v=xumSsPlhB2o"
    },
    {
        "index": 79,
        "title": "PyCon US 2025 Tutorial Sneak Peek: \"Codyssey: A playful control system workshop\" - Daniel Anderson",
        "url": "https://www.youtube.com/watch?v=bIi9aei28_g",
        "video_id": "bIi9aei28_g",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250429",
        "duration": 68,
        "view_count": 679,
        "like_count": 15,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Codyssey is a 3-hour workshop where you’ll learn about the control system programming model and implement simple systems in Python to autonomously play various games. You’ll observe the behavior of your system in a visual environment, and compete with other participants to solve as many games as you can. Along the way, you’ll have to think creatively and practice translating your intuition into code.\n\nDuring the workshop, I’ll mentor individual participants/pairs; after the competitive part, I’ll live-code solutions for chosen challenges while demonstrating how to apply the control system programming model.\n\nEach challenge will have you implementing a function that runs dozens of times a second, deciding which action to take. \n\nCome hone your Python skills, adapt to a new way of thinking, and tackle some epic challenges!\n\nJoining us at PyCon US 2025? Register your spot for this tutorial today via the us.pycon.org/2025/ website! More information about PyCon US 2025 tutorials and the full schedule here: https://us.pycon.org/2025/schedule/tutorials/",
        "thumbnail": "https://i.ytimg.com/vi/bIi9aei28_g/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=bIi9aei28_g",
        "original_url": "https://www.youtube.com/watch?v=bIi9aei28_g"
    },
    {
        "index": 80,
        "title": "PyCon US 2025 Tutorial Sneak Peek: \"Comprehending Comprehensions\" - Reuven M. Lerner",
        "url": "https://www.youtube.com/watch?v=nInD04X0C08",
        "video_id": "nInD04X0C08",
        "uploader": "PyCon US",
        "uploader_id": "@PyConUS",
        "uploader_url": "https://www.youtube.com/@PyConUS",
        "upload_date": "20250428",
        "duration": 174,
        "view_count": 655,
        "like_count": 22,
        "comment_count": null,
        "tags": [],
        "categories": [
            "Education"
        ],
        "description": "Are you confused or frustrated by comprehensions? Do you wonder about their syntax -- or even why we would use them in the first place?\n\nIn my \"Comprehending comprehensions\" tutorial, you'll learn not only how to write comprehensions, but (more importantly) why and when to do so. We'll go through list, set, and dict comprehensions, as well as the harder-to-understand nested-comprehension syntax and generator expressions.\n\nThe tutorial won't use slides: Rather, I'll use a notebook to write notes and code in real time, allowing me not only to demonstrate the code, but also to answer your questions in real time. (The notebook I use will be available both while the tutorial is going on, and afterwards.)\n\nI've been teaching Python for many years, and comprehensions remain one of the topics that most confuse developers, regardless of how long they've been using Python. After attending my tutorial, you'll not only know how to use comprehensions -- you'll actually want to do so.\n\nJoining us at PyCon US 2025? Register your spot for this tutorial today via the us.pycon.org/2025/ website! More information about PyCon US 2025 tutorials and the full schedule here: https://us.pycon.org/2025/schedule/tutorials/",
        "thumbnail": "https://i.ytimg.com/vi/nInD04X0C08/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=nInD04X0C08",
        "original_url": "https://www.youtube.com/watch?v=nInD04X0C08"
    }
]